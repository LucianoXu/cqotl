%% This BibTeX bibliography file was created using BibDesk.
%% https://bibdesk.sourceforge.io/

%% Created for 许英特 at 2024-06-06 15:25:43 +0800

@article{newman1942theories,
 ISSN = {0003486X, 19398980},
 URL = {http://www.jstor.org/stable/1968867},
 author = {M. H. A. Newman},
 journal = {Annals of Mathematics},
 number = {2},
 pages = {223--243},
 publisher = {[Annals of Mathematics, Trustees of Princeton University on Behalf of the Annals of Mathematics, Mathematics Department, Princeton University]},
 title = {On Theories with a Combinatorial Definition of "Equivalence"},
 urldate = {2024-11-16},
 volume = {43},
 year = {1942},
 doi = {https://doi.org/10.2307/1968867}
}


@inproceedings{zhcalculus,
  author       = {Miriam Backens and
                  Aleks Kissinger},
  editor       = {Peter Selinger and
                  Giulio Chiribella},
  title        = {{ZH:} {A} Complete Graphical Calculus for Quantum Computations Involving
                  Classical Non-linearity},
  booktitle    = {Proceedings 15th International Conference on Quantum Physics and Logic,
                  {QPL} 2018, Halifax, Canada, 3-7th June 2018},
  series       = {{EPTCS}},
  volume       = {287},
  pages        = {23--42},
  year         = {2018},
  url          = {https://doi.org/10.4204/EPTCS.287.2},
  doi          = {10.4204/EPTCS.287.2},
  timestamp    = {Sat, 28 Oct 2023 13:59:16 +0200},
  biburl       = {https://dblp.org/rec/journals/corr/abs-1805-02175.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}


@inproceedings{Vilmart23,
  author       = {Renaud Vilmart},
  editor       = {Bartek Klin and
                  Elaine Pimentel},
  title        = {Completeness of Sum-Over-Paths for Toffoli-Hadamard and the Dyadic
                  Fragments of Quantum Computation},
  booktitle    = {31st {EACSL} Annual Conference on Computer Science Logic, {CSL} 2023,
                  February 13-16, 2023, Warsaw, Poland},
  series       = {LIPIcs},
  volume       = {252},
  pages        = {36:1--36:17},
  publisher    = {Schloss Dagstuhl - Leibniz-Zentrum f{\"{u}}r Informatik},
  year         = {2023},
  url          = {https://doi.org/10.4230/LIPIcs.CSL.2023.36},
  doi          = {10.4230/LIPICS.CSL.2023.36},
  timestamp    = {Wed, 21 Aug 2024 22:46:00 +0200},
  biburl       = {https://dblp.org/rec/conf/csl/Vilmart23.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{benanav1987complexity,
title = {Complexity of matching problems},
journal = {Journal of Symbolic Computation},
volume = {3},
number = {1},
pages = {203-216},
year = {1987},
issn = {0747-7171},
doi = {https://doi.org/10.1016/S0747-7171(87)80027-5},
url = {https://www.sciencedirect.com/science/article/pii/S0747717187800275},
author = {Dan Benanav and Deepak Kapur and Paliath Narendran},
abstract = {The associative-commutative matching problem is shown to be NP-complete; more precisely, the matching problem for terms in which some function symbols are uninterpreted and others are both associative and commutative, is NP-complete. It turns out that the similar problems of associative-matching and commutative-matching are also NP-complete. However, if every variable appears at most once in a term being matched, then the associative-commutative matching problem is shown to have an upper-bound of O ( | s | * | t |3), where | s | and | t | are respectively the sizes of the pattern 8 and the subject t.}
}

@incollection{tarski1998decision,
author="Tarski, Alfred",
editor="Caviness, Bob F.
and Johnson, Jeremy R.",
title="A Decision Method for Elementary Algebra and Geometry",
booktitle="Quantifier Elimination and Cylindrical Algebraic Decomposition",
year="1998",
publisher="Springer Vienna",
address="Vienna",
pages="24--84",
abstract="By a decision method for a class K of sentence (or other expressions) is meant a method by means of which, given any sentence $\theta$, one can always decide in a finite number of steps whether $\theta$ is in K; by a decision problem for a class K we mean the problem of finding a decision method for K. A decision method must be like a recipe, which tells one what to do at each steps so that no intelligence is required to follow it; and the method can be applied by anyone so long as he is able to read and follow directions.",
isbn="978-3-7091-9459-1",
doi = {https://doi.org/10.1007/978-3-7091-9459-1_3}
}


@article{collins1976quantifier,
author = {Collins, George E.}, title = {Quantifier Elimination for Real Closed Fields by Cylindrical Algebraic Decomposition: a synopsis}, year = {1976}, issue_date = {February 1976}, publisher = {Association for Computing Machinery}, address = {New York, NY, USA}, volume = {10}, number = {1}, issn = {0163-5824}, url = {https://doi.org/10.1145/1093390.1093393}, doi = {10.1145/1093390.1093393}, abstract = {This is a brief summary and exposition of the paper "Quantifier Elimination for Real Closed Fields by Cylindrical Algebraic Decomposition," which was presented at the Second GI Conference on Automata Theory and Formal Languages, University of Kaiserslautern, May 1975, and which appears in the proceedings of that conference, <u>Lecture Notes in Computer Science</u>, Vol. 33 (Springer Verlag, Berlin, 1975, pages 134--183). A preliminary version of this paper was presented at the EUROSAM 74 Conference, Stockholm, July 1974, and appears in the proceedings of that conference, <u>SIGSAM Bulletin</u>, Vol. 8, No. 3 (August 1974), pages 30--90. The final version of the paper includes a rather detailed analysis of the computing time of the algorithm, which was omitted from the preliminary version In addition, the final version describes several significant improvements to the algorithm of the earlier version.}, journal = {SIGSAM Bull.}, month = feb, pages = {10–12}, numpages = {3} }


@incollection{macintyre1996decidability,
	author = {Angus Macintyre and Alex J. Wilkie},
	booktitle = {Kreiseliana: About and Around Georg Kreisel},
	editor = {Piergiorgio Odifreddi},
	pages = {441--467},
	publisher = {A K Peters},
	title = {On the Decidability of the Real Exponential Field},
	year = {1996}
}



@article{amy2023complete,
   title={Complete Equational Theories for the Sum-Over-Paths with Unbalanced Amplitudes},
   volume={384},
   ISSN={2075-2180},
   url={http://dx.doi.org/10.4204/EPTCS.384.8},
   DOI={10.4204/eptcs.384.8},
   journal={Electronic Proceedings in Theoretical Computer Science},
   publisher={Open Publishing Association},
   author={Amy, Matthew},
   year={2023},
   month=aug, pages={127–141} }


@inproceedings{jeandel2018complete,
author = {Jeandel, Emmanuel and Perdrix, Simon and Vilmart, Renaud}, title = {A Complete Axiomatisation of the ZX-Calculus for Clifford+T Quantum Mechanics}, year = {2018}, isbn = {9781450355834}, publisher = {Association for Computing Machinery}, address = {New York, NY, USA}, url = {https://doi.org/10.1145/3209108.3209131}, doi = {10.1145/3209108.3209131}, abstract = {We introduce the first complete and approximately universal diagrammatic language for quantum mechanics. We make the ZX-Calculus, a diagrammatic language introduced by Coecke and Duncan, complete for the so-called Clifford+T quantum mechanics by adding two new axioms to the language. The completeness of the ZX-Calculus for Clifford+T quantum mechanics -- also called the π/4-fragment of the ZX-Calculus -- was one of the main open questions in categorical quantum mechanics. We prove the completeness of this fragment using the recently studied ZW-Calculus, a calculus dealing with integer matrices. We also prove that the π/4-fragment of the ZX-Calculus represents exactly all the matrices over some finite dimensional extension of the ring of dyadic rationals.}, booktitle = {Proceedings of the 33rd Annual ACM/IEEE Symposium on Logic in Computer Science}, pages = {559–568}, numpages = {10}, keywords = {ZX-Calculus, Completeness, Clifford+T, Categorical Quantum Mechanics}, location = {Oxford, United Kingdom}, series = {LICS '18} }


@misc{vandewetering2020zx,
      title={ZX-calculus for the working quantum computer scientist}, 
      author={John van de Wetering},
      year={2020},
      eprint={2012.13966},
      archivePrefix={arXiv},
      primaryClass={quant-ph},
      url={https://arxiv.org/abs/2012.13966}, 
}

@inproceedings{diaz2019realizability,
  author={Díaz-Caro, Alejandro and Guillermo, Mauricio and Miquel, Alexandre and Valiron, Benoît},
  booktitle={2019 34th Annual ACM/IEEE Symposium on Logic in Computer Science (LICS)}, 
  title={Realizability in the Unitary Sphere}, 
  year={2019},
  volume={},
  number={},
  pages={1-13},
  keywords={Calculus;Semantics;Integrated circuit modeling;Quantum computing;Quantum mechanics;Computational modeling;Mathematical model},
  doi={10.1109/LICS.2019.8785834}}


@article{diaz2019two,
title = {Two linearities for quantum computing in the lambda calculus},
journal = {Biosystems},
volume = {186},
pages = {104012},
year = {2019},
note = {Selected papers from the International Conference on the Theory and Practice of Natural Computing 2017},
issn = {0303-2647},
doi = {https://doi.org/10.1016/j.biosystems.2019.104012},
url = {https://www.sciencedirect.com/science/article/pii/S0303264718301102},
author = {Alejandro Díaz-Caro and Gilles Dowek and Juan Pablo Rinaldi},
keywords = {Quantum computing, Lambda-calculus, Algebraic linearity, Linear logic, Measurement},
abstract = {We propose a way to unify two approaches of non-cloning in quantum lambda-calculi: logical and algebraic linearities. The first approach is to forbid duplicating variables, while the second is to consider all lambda-terms as algebraic-linear functions. We illustrate this idea by defining a quantum extension of first-order simply-typed lambda-calculus, where the type is linear on superposition, while allows cloning base vectors. In addition, we provide an interpretation of the calculus where superposed types are interpreted as vector spaces and non-superposed types as their basis.}
}

@article{diaz2022quantum,
  title={Quantum control in the unitary sphere: Lambda-S1 and its categorical model},
  author={D{\'\i}az-Caro, Alejandro and Malherbe, Octavio},
  journal={Logical Methods in Computer Science},
  volume={18},
  year={2022},
  publisher={Episciences. org}
}
@inproceedings{diaz2017typing,
author="D{\'i}az-Caro, Alejandro
and Dowek, Gilles",
editor="Mart{\'i}n-Vide, Carlos
and Neruda, Roman
and Vega-Rodr{\'i}guez, Miguel A.",
title="Typing Quantum Superpositions and Measurement",
booktitle="Theory and Practice of Natural Computing",
year="2017",
publisher="Springer International Publishing",
address="Cham",
pages="281--293",
abstract="We propose a way to unify two approaches of non-cloning in quantum lambda-calculi. The first approach is to forbid duplicating variables, while the second is to consider all lambda-terms as algebraic-linear functions. We illustrate this idea by defining a quantum extension of first-order simply-typed lambda-calculus, where the type is linear on superposition, while allows cloning base vectors. In addition, we provide an interpretation of the calculus where superposed types are interpreted as vector spaces and non-superposed types as their basis.",
isbn="978-3-319-71069-3",
doi = "https://doi.org/10.1007/978-3-319-71069-3_22"
}


@inproceedings{10.1145/3566097.3567932,
author = {Peham, Tom and Burgholzer, Lukas and Wille, Robert},
title = {Equivalence Checking of Parameterized Quantum Circuits: Verifying the Compilation of Variational Quantum Algorithms},
year = {2023},
isbn = {9781450397834},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3566097.3567932},
doi = {10.1145/3566097.3567932},
abstract = {Variational quantum algorithms have been introduced as a promising class of quantum-classical hybrid algorithms that can already be used with the noisy quantum computing hardware available today by employing parameterized quantum circuits. Considering the non-trivial nature of quantum circuit compilation and the subtleties of quantum computing, it is essential to verify that these parameterized circuits have been compiled correctly. Established equivalence checking procedures that handle parameter-free circuits already exist. However, no methodology capable of handling circuits with parameters has been proposed yet. This work fills this gap by showing that verifying the equivalence of parameterized circuits can be achieved in a purely symbolic fashion using an equivalence checking approach based on the ZX-calculus. At the same time, proofs of inequality can be efficiently obtained with conventional methods by taking advantage of the degrees of freedom inherent to parameterized circuits. We implemented the corresponding methods and proved that the resulting methodology is complete. Experimental evaluations (using the entire parametric ansatz circuit library provided by Qiskit as benchmarks) demonstrate the efficacy of the proposed approach.},
booktitle = {Proceedings of the 28th Asia and South Pacific Design Automation Conference},
pages = {702–708},
numpages = {7},
location = {Tokyo, Japan},
series = {ASPDAC '23}
}

@article{duncan2020graph,
  doi = {10.22331/q-2020-06-04-279},
  url = {https://doi.org/10.22331/q-2020-06-04-279},
  title = {Graph-theoretic {S}implification of {Q}uantum {C}ircuits with the {ZX}-calculus},
  author = {Duncan, Ross and Kissinger, Aleks and Perdrix, Simon and van de Wetering, John},
  journal = {{Quantum}},
  issn = {2521-327X},
  publisher = {{Verein zur F{\"{o}}rderung des Open Access Publizierens in den Quantenwissenschaften}},
  volume = {4},
  pages = {279},
  month = jun,
  year = {2020}
}

@article{lehmann2022vyzx,
      title={VyZX : A Vision for Verifying the ZX Calculus}, 
      author={Adrian Lehmann and Ben Caldwell and Robert Rand},
      year={2022},
      eprint={2205.05781},
      archivePrefix={arXiv},
      primaryClass={quant-ph},
      url={https://arxiv.org/abs/2205.05781}, 
}

@article{kissinger2019pyzx,
   title={PyZX: Large Scale Automated Diagrammatic Reasoning},
   volume={318},
   ISSN={2075-2180},
   url={http://dx.doi.org/10.4204/EPTCS.318.14},
   DOI={10.4204/eptcs.318.14},
   journal={Electronic Proceedings in Theoretical Computer Science},
   publisher={Open Publishing Association},
   author={Kissinger, Aleks and van de Wetering, John},
   year={2020},
   month=may, pages={229–241} }


@article{amy2018towards,   
    title={Towards Large-scale Functional Verification of Universal Quantum Circuits},
   volume={287},
   ISSN={2075-2180},
   url={http://dx.doi.org/10.4204/EPTCS.287.1},
   DOI={10.4204/eptcs.287.1},
   journal={Electronic Proceedings in Theoretical Computer Science},
   publisher={Open Publishing Association},
   author={Amy, Matthew},
   year={2019},
   month=jan, pages={1–21} }


@article{PALSBERG2024206,
title = {Optimal implementation of quantum gates with two controls},
journal = {Linear Algebra and its Applications},
volume = {694},
pages = {206-261},
year = {2024},
issn = {0024-3795},
doi = {https://doi.org/10.1016/j.laa.2024.03.039},
url = {https://www.sciencedirect.com/science/article/pii/S0024379524001356},
author = {Jens Palsberg and Nengkun Yu},
keywords = {Quantum computing, Unitary matrices, Optimality},
abstract = {We give a detailed proof of a well-known theorem in quantum computing. The theorem characterizes the number of two-qubit gates that is necessary for implementing three-qubit quantum gates with two controls. For example, the theorem implies that five 2-qubit gates are necessary for implementing the Toffoli gate. No detailed proof was available earlier.}
}

@inproceedings{peng2022algebraic,
  title={Algebraic reasoning of Quantum programs via non-idempotent Kleene algebra},
  author={Peng, Yuxiang and Ying, Mingsheng and Wu, Xiaodi},
  booktitle={Proceedings of the 43rd ACM SIGPLAN International Conference on Programming Language Design and Implementation},
  pages={657--670},
  year={2022}
}

@article{hietala2021verified,
  title={A verified optimizer for quantum circuits},
  author={Hietala, Kesha and Rand, Robert and Hung, Shih-Han and Wu, Xiaodi and Hicks, Michael},
  journal={Proceedings of the ACM on Programming Languages},
  volume={5},
  number={POPL},
  pages={1--29},
  year={2021},
  publisher={ACM New York, NY, USA}
}

@article{lehmann2023vyzx,
  title={VyZX: Formal Verification of a Graphical Quantum Language},
  author={Lehmann, Adrian and Caldwell, Ben and Shah, Bhakti and Rand, Robert},
  journal={arXiv preprint arXiv:2311.11571},
  year={2023}
}

@inproceedings{chareton2021automated,
author = {Chareton, Christophe and Bardin, S\'{e}bastien and Bobot, Fran\c{c}ois and Perrelle, Valentin and Valiron, Beno\^{\i}t}, title = {An Automated Deductive Verification Framework for Circuit-building Quantum Programs}, year = {2021}, isbn = {978-3-030-72018-6}, publisher = {Springer-Verlag}, address = {Berlin, Heidelberg}, url = {https://doi.org/10.1007/978-3-030-72019-3_6}, doi = {10.1007/978-3-030-72019-3_6}, abstract = {While recent progress in quantum hardware open the door for significant speedup in certain key areas, quantum algorithms are still hard to implement right, and the validation of such quantum programs is a challenge. In this paper we propose Qbricks, a formal verification environment for circuit-building quantum programs, featuring both parametric specifications and a high degree of proof automation. We propose a logical framework based on first-order logic, and develop the main tool we rely upon for achieving the automation of proofs of quantum specification: PPS, a parametric extension of the recently developed path sum semantics. To back-up our claims, we implement and verify parametric versions of several famous and non-trivial quantum algorithms, including the quantum parts of Shor’s integer factoring, quantum phase estimation (QPE) and Grover’s search.}, booktitle = {Programming Languages and Systems: 30th European Symposium on Programming, ESOP 2021, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2021, Luxembourg City, Luxembourg, March 27 – April 1, 2021, Proceedings}, pages = {148–177}, numpages = {30}, keywords = {quantum circuits, quantum programming, deductive verification}, location = {Luxembourg City, Luxembourg} }


@inproceedings{clement2023complete,
  title={A complete equational theory for quantum circuits},
  author={Cl{\'e}ment, Alexandre and Heurtel, Nicolas and Mansfield, Shane and Perdrix, Simon and Valiron, Beno{\^\i}t},
  booktitle={2023 38th Annual ACM/IEEE Symposium on Logic in Computer Science (LICS)},
  pages={1--13},
  year={2023},
  organization={IEEE}
}

@inproceedings{carette2023complete,
  author={Carette, Titouan and Hoffreumon, Timothée and Larroque, Émile and Vilmart, Renaud},
  booktitle={2023 38th Annual ACM/IEEE Symposium on Logic in Computer Science (LICS)}, 
  title={Complete Graphical Language for Hermiticity-Preserving Superoperators}, 
  year={2023},
  volume={},
  number={},
  pages={1-22},
  keywords={Computer science;Quantum computing;Quantum mechanics;Hilbert space;Quantum Computing;Hermiticity-Preserving Maps;Antilinearity;ZW-calculus;Completeness;Universality;Normal Form},
  doi={10.1109/LICS56636.2023.10175712}}


@article{ng2017universal,
  title={A universal completion of the ZX-calculus},
  author={Ng, Kang Feng and Wang, Quanlong},
  journal={arXiv preprint arXiv:1706.09877},
  year={2017}
}

@inproceedings{coecke2008interacting,
author="Coecke, Bob
and Duncan, Ross",
editor="Aceto, Luca
and Damg{\aa}rd, Ivan
and Goldberg, Leslie Ann
and Halld{\'o}rsson, Magn{\'u}s M.
and Ing{\'o}lfsd{\'o}ttir, Anna
and Walukiewicz, Igor",
title="Interacting Quantum Observables",
booktitle="Automata, Languages and Programming",
year="2008",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="298--310",
abstract="We formalise the constructive content of an essential feature of quantum mechanics: the interaction of complementary quantum observables, and information flow mediated by them. Using a general categorical formulation, we show that pairs of mutually unbiased quantum observables form bialgebra-like structures. We also provide an abstract account on the quantum data encoded in complex phases, and prove a normal form theorem for it. Together these enable us to describe all observables of finite dimensional Hilbert space quantum mechanics. The resulting equations suffice to perform computations with elementary quantum gates, translate between distinct quantum computational models, establish the equivalence of entangled quantum states, and simulate quantum algorithms such as the quantum Fourier transform. All these computations moreover happen within an intuitive diagrammatic calculus.",
isbn="978-3-540-70583-3",
doi = "https://doi.org/10.1007/978-3-540-70583-3_25"
}



@article{wood2011tensor,
  title={Tensor networks and graphical calculus for open quantum systems},
  author={Wood, Christopher J and Biamonte, Jacob D and Cory, David G},
  journal={arXiv preprint arXiv:1111.6950},
  year={2011}
}

@inproceedings{feng2023verification,
  title={Verification of nondeterministic quantum programs},
  author={Feng, Yuan and Xu, Yingte},
  booktitle={Proceedings of the 28th ACM International Conference on Architectural Support for Programming Languages and Operating Systems, Volume 3},
  pages={789--805},
  year={2023}
}

@article{feng2021quantum,
author = {Feng, Yuan and Ying, Mingsheng}, title = {Quantum Hoare Logic with Classical Variables}, year = {2021}, issue_date = {December 2021}, publisher = {Association for Computing Machinery}, address = {New York, NY, USA}, volume = {2}, number = {4}, url = {https://doi.org/10.1145/3456877}, doi = {10.1145/3456877}, abstract = {Hoare logic provides a syntax-oriented method to reason about program correctness and has been proven effective in the verification of classical and probabilistic programs. Existing proposals for quantum Hoare logic either lack completeness or support only quantum variables, thus limiting their capability in practical use. In this article, we propose a quantum Hoare logic for a simple while language that involves both classical and quantum variables. Its soundness and relative completeness are proven for both partial and total correctness of quantum programs written in the language. Remarkably, with novel definitions of classical-quantum states and corresponding assertions, the logic system is quite simple and similar to the traditional Hoare logic for classical programs. Furthermore, to simplify reasoning in real applications, auxiliary proof rules are provided that support standard logical operation in the classical part of assertions and super-operator application in the quantum part. Finally, a series of practical quantum algorithms, in particular the whole algorithm of Shor’s factorisation, are formally verified to show the effectiveness of the logic.}, journal = {ACM Transactions on Quantum Computing}, month = dec, articleno = {16}, numpages = {43}, keywords = {quantum while language, Quantum programming} }

@article{ying2012floyd,
author = {Ying, Mingsheng}, title = {Floyd--hoare logic for quantum programs}, year = {2012}, issue_date = {December 2011}, publisher = {Association for Computing Machinery}, address = {New York, NY, USA}, volume = {33}, number = {6}, issn = {0164-0925}, url = {https://doi.org/10.1145/2049706.2049708}, doi = {10.1145/2049706.2049708}, abstract = {Floyd--Hoare logic is a foundation of axiomatic semantics of classical programs, and it provides effective proof techniques for reasoning about correctness of classical programs. To offer similar techniques for quantum program verification and to build a logical foundation of programming methodology for quantum computers, we develop a full-fledged Floyd--Hoare logic for both partial and total correctness of quantum programs. It is proved that this logic is (relatively) complete by exploiting the power of weakest preconditions and weakest liberal preconditions for quantum programs.}, journal = {ACM Trans. Program. Lang. Syst.}, month = jan, articleno = {19}, numpages = {49}, keywords = {programming language, completeness, axiomatic semantics, Quantum computation, Floyd--Hoare logic} }


@article{paykin2017qwire,
  title={QWIRE: a core language for quantum circuits},
  author={Paykin, Jennifer and Rand, Robert and Zdancewic, Steve},
  journal={ACM SIGPLAN Notices},
  volume={52},
  number={1},
  pages={846--858},
  year={2017},
  publisher={ACM New York, NY, USA}
}

@article{abhari2012scaffold,
  title={Scaffold: Quantum programming language},
  author={Abhari, Ali Javadi and Faruque, Arvin and Dousti, Mohammad Javad and Svec, Lukas and Catu, Oana and Chakrabati, Amlan and Chiang, Chen-Fu and Vanderwilt, Seth and Black, John and Chong, Fred and others},
  journal={Princeton Univ NJ Dept of Computer Science},
  year={2012}
}

@inproceedings{Green2013,
author = {Green, Alexander S. and Lumsdaine, Peter LeFanu and Ross, Neil J. and Selinger, Peter and Valiron, Beno\^{\i}t},
title = {Quipper: a scalable quantum programming language},
year = {2013},
isbn = {9781450320146},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491956.2462177},
doi = {10.1145/2491956.2462177},
abstract = {The field of quantum algorithms is vibrant. Still, there is currently a lack of programming languages for describing quantum computation on a practical scale, i.e., not just at the level of toy problems. We address this issue by introducing Quipper, a scalable, expressive, functional, higher-order quantum programming language. Quipper has been used to program a diverse set of non-trivial quantum algorithms, and can generate quantum gate representations using trillions of gates. It is geared towards a model of computation that uses a classical computer to control a quantum device, but is not dependent on any particular model of quantum hardware. Quipper has proven effective and easy to use, and opens the door towards using formal methods to analyze quantum algorithms.},
booktitle = {Proceedings of the 34th ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {333–342},
numpages = {10},
keywords = {quipper, quantum programming languages},
location = {Seattle, Washington, USA},
series = {PLDI '13}
}


@INPROCEEDINGS{Poor2023,
  author={Poór, Boldizsár and Wang, Quanlong and Shaikh, Razin A. and Yeh, Lia and Yeung, Richie and Coecke, Bob},
  booktitle={2023 38th Annual ACM/IEEE Symposium on Logic in Computer Science (LICS)}, 
  title={Completeness for arbitrary finite dimensions of ZXW-calculus, a unifying calculus}, 
  year={2023},
  volume={},
  number={},
  pages={1-14},
  keywords={Industries;Qubit;Quantum mechanics;Machine learning;Calculus;Hilbert space;Quantum circuit;ZXW-calculus;ZX-calculus;ZW-calculus;completeness;universal completeness;qudit;higher-dimension},
  doi={10.1109/LICS56636.2023.10175672}}


@article{Buckley2024,
author = {Buckley, Anita and Chuprikov, Pavel and Otoni, Rodrigo and Soul\'{e}, Robert and Rand, Robert and Eugster, Patrick},
title = {An Algebraic Language for Specifying Quantum Networks},
year = {2024},
issue_date = {June 2024},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {8},
number = {PLDI},
url = {https://doi.org/10.1145/3656430},
doi = {10.1145/3656430},
abstract = {Quantum networks connect quantum capable nodes in order to achieve capabilities that are impossible only using classical information. Their fundamental unit of communication is the Bell pair, which consists of two entangled quantum bits. Unfortunately, Bell pairs are fragile and difficult to transmit directly, necessitating a network of repeaters, along with software and hardware that can ensure the desired results. Challenging intrinsic features of quantum networks, such as dealing with resource competition, motivate formal reasoning about quantum network protocols. To this end, we developed BellKAT, a novel specification language for quantum networks based upon Kleene algebra. 
 
To cater to the specific needs of quantum networks, we designed an algebraic structure, called BellSKA, which we use as the basis of BellKAT's denotational semantics. BellKAT's constructs describe entanglement distribution rules that allow for modular specification. We give BellKAT a sound and complete equational theory, allowing us to verify network protocols. We provide a prototype tool to showcase the expressiveness of BellKAT and how to optimize and verify networks in practice.},
journal = {Proc. ACM Program. Lang.},
month = {jun},
articleno = {200},
numpages = {23},
keywords = {Kleene algebra, entanglement, quantum networks}
}

@inproceedings{pagani2014applying,
  title={Applying quantitative semantics to higher-order quantum computing},
  author={Pagani, Michele and Selinger, Peter and Valiron, Beno{\^\i}t},
  booktitle={Proceedings of the 41st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
  pages={647--658},
  year={2014}
}

@article{selinger2009quantum,
  title={Quantum lambda calculus},
  author={Selinger, Peter and Valiron, Beno{\i}t and others},
  journal={Semantic techniques in quantum computation},
  pages={135--172},
  year={2009}
}

@article{zorzi2016quantum,
  title={On quantum lambda calculi: a foundational perspective},
  author={Zorzi, Margherita},
  journal={Mathematical Structures in Computer Science},
  volume={26},
  number={7},
  pages={1107--1195},
  year={2016},
  publisher={Cambridge University Press}
}

@article{d2006quantum,
title={Quantum weakest preconditions}, volume={16}, DOI={10.1017/S0960129506005251}, number={3}, journal={Mathematical Structures in Computer Science}, author={D’HONDT, ELLIE and PANANGADEN, PRAKASH}, year={2006}, pages={429–451}}

@article{feng2023abstract,
title = {Abstract interpretation, Hoare logic, and incorrectness logic for quantum programs},
journal = {Information and Computation},
volume = {294},
pages = {105077},
year = {2023},
issn = {0890-5401},
doi = {https://doi.org/10.1016/j.ic.2023.105077},
url = {https://www.sciencedirect.com/science/article/pii/S0890540123000809},
author = {Yuan Feng and Sanjiang Li},
keywords = {Quantum programming, Abstract interpretation, Incorrectness logic},
abstract = {Abstract interpretation, Hoare logic, and incorrectness (or reverse Hoare) logic are powerful techniques for static analysis of computer programs. They have all been successfully extended to the quantum setting, but developed largely in parallel. This paper explores the relationship between these techniques in the context of verifying quantum while-programs, where the abstract domain and the set of assertions for quantum states are well-structured. We show that any complete quantum abstract interpretation induces a quantum Hoare logic and a quantum incorrectness logic, both being sound and relatively complete. Moreover, the induced logic systems operate in a forward manner, making them more suitable for certain applications. Conversely, any sound and relatively complete quantum Hoare logic or incorrectness logic induces a complete quantum abstract interpretation. As an application, we show the non-existence of any sound and relatively complete quantum Hoare logic or incorrectness logic if tuples of local subspaces are taken as assertions.}
}

@inproceedings{DacaHK16,
  author       = {Przemyslaw Daca and
                  Thomas A. Henzinger and
                  Andrey Kupriyanov},
  editor       = {Swarat Chaudhuri and
                  Azadeh Farzan},
  title        = {Array Folds Logic},
  booktitle    = {Computer Aided Verification - 28th International Conference, {CAV}
                  2016, Toronto, ON, Canada, July 17-23, 2016, Proceedings, Part {II}},
  series       = {Lecture Notes in Computer Science},
  volume       = {9780},
  pages        = {230--248},
  publisher    = {Springer},
  year         = {2016},
  url          = {https://doi.org/10.1007/978-3-319-41540-6\_13},
  doi          = {10.1007/978-3-319-41540-6\_13},
  timestamp    = {Tue, 14 May 2019 10:00:43 +0200},
  biburl       = {https://dblp.org/rec/conf/cav/DacaHK16.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inbook{Selinger2010,
   title={A Survey of Graphical Languages for Monoidal Categories},
   ISBN={9783642128219},
   ISSN={1616-6361},
   url={http://dx.doi.org/10.1007/978-3-642-12821-9_4},
   DOI={10.1007/978-3-642-12821-9_4},
   booktitle={Lecture Notes in Physics},
   publisher={Springer Berlin Heidelberg},
   author={Selinger, P.},
   year={2010},
   pages={289–355} }


@article{RayaK24,
  author       = {Rodrigo Raya and
                  Viktor Kuncak},
  title        = {On algebraic array theories},
  journal      = {J. Log. Algebraic Methods Program.},
  volume       = {136},
  pages        = {100906},
  year         = {2024},
  url          = {https://doi.org/10.1016/j.jlamp.2023.100906},
  doi          = {10.1016/J.JLAMP.2023.100906},
  timestamp    = {Fri, 08 Mar 2024 13:21:51 +0100},
  biburl       = {https://dblp.org/rec/journals/jlap/RayaK24.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{BlanquiK11,
  author       = {Fr{\'{e}}d{\'{e}}ric Blanqui and
                  Adam Koprowski},
  title        = {CoLoR: a Coq library on well-founded rewrite relations and its application
                  to the automated verification of termination certificates},
  journal      = {Math. Struct. Comput. Sci.},
  volume       = {21},
  number       = {4},
  pages        = {827--859},
  year         = {2011},
  url          = {https://doi.org/10.1017/S0960129511000120},
  doi          = {10.1017/S0960129511000120},
  timestamp    = {Sun, 02 Oct 2022 15:44:05 +0200},
  biburl       = {https://dblp.org/rec/journals/mscs/BlanquiK11.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{HasegawaHP08,
  author       = {Masahito Hasegawa and
                  Martin Hofmann and
                  Gordon D. Plotkin},
  editor       = {Arnon Avron and
                  Nachum Dershowitz and
                  Alexander Rabinovich},
  title        = {Finite Dimensional Vector Spaces Are Complete for Traced Symmetric
                  Monoidal Categories},
  booktitle    = {Pillars of Computer Science, Essays Dedicated to Boris (Boaz) Trakhtenbrot
                  on the Occasion of His 85th Birthday},
  series       = {Lecture Notes in Computer Science},
  volume       = {4800},
  pages        = {367--385},
  publisher    = {Springer},
  year         = {2008},
  url          = {https://doi.org/10.1007/978-3-540-78127-1\_20},
  doi          = {10.1007/978-3-540-78127-1\_20},
  timestamp    = {Sun, 02 Oct 2022 15:55:45 +0200},
  biburl       = {https://dblp.org/rec/conf/birthday/HasegawaHP08.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
@inproceedings{Selinger11,
  author       = {Peter Selinger},
  editor       = {Bob Coecke and
                  Ian Mackie and
                  Prakash Panangaden and
                  Peter Selinger},
  title        = {Finite Dimensional Hilbert Spaces are Complete for Dagger Compact
                  Closed Categories (Extended Abstract)},
  booktitle    = {Proceedings of the Joint 5th International Workshop on Quantum Physics
                  and Logic and 4th Workshop on Developments in Computational Models,
                  QPL/DCM@ICALP 2008, Reykjavik, Iceland, July 12-13, 2008},
  series       = {Electronic Notes in Theoretical Computer Science},
  volume       = {270},
  number       = {1},
  pages        = {113--119},
  publisher    = {Elsevier},
  year         = {2008},
  url          = {https://doi.org/10.1016/j.entcs.2011.01.010},
  doi          = {10.1016/J.ENTCS.2011.01.010},
  timestamp    = {Fri, 10 Mar 2023 13:10:52 +0100},
  biburl       = {https://dblp.org/rec/journals/entcs/Selinger11.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
@article{LagoMZ09,
  author       = {Ugo Dal Lago and
                  Andrea Masini and
                  Margherita Zorzi},
  title        = {On a measurement-free quantum lambda calculus with classical control},
  journal      = {Math. Struct. Comput. Sci.},
  volume       = {19},
  number       = {2},
  pages        = {297--335},
  year         = {2009},
  url          = {https://doi.org/10.1017/S096012950800741X},
  doi          = {10.1017/S096012950800741X},
  timestamp    = {Wed, 01 Apr 2020 08:48:55 +0200},
  biburl       = {https://dblp.org/rec/journals/mscs/LagoMZ09.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{LagoMZ11,
  author       = {Ugo Dal Lago and
                  Andrea Masini and
                  Margherita Zorzi},
  editor       = {Bob Coecke and
                  Prakash Panangaden and
                  Peter Selinger},
  title        = {Confluence Results for a Quantum Lambda Calculus with Measurements},
  booktitle    = {Proceedings of the 6th International Workshop on Quantum Physics and
                  Logic, QPL@MFPS 2009, Oxford, UK, April 8-9, 2009},
  series       = {Electronic Notes in Theoretical Computer Science},
  volume       = {270},
  number       = {2},
  pages        = {251--261},
  publisher    = {Elsevier},
  year         = {2009},
  url          = {https://doi.org/10.1016/j.entcs.2011.01.035},
  doi          = {10.1016/J.ENTCS.2011.01.035},
  timestamp    = {Fri, 10 Mar 2023 13:19:39 +0100},
  biburl       = {https://dblp.org/rec/journals/entcs/LagoMZ11.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{Tonder04,
  author       = {Andr{\'{e}} van Tonder},
  title        = {A Lambda Calculus for Quantum Computation},
  journal      = {{SIAM} J. Comput.},
  volume       = {33},
  number       = {5},
  pages        = {1109--1135},
  year         = {2004},
  url          = {https://doi.org/10.1137/S0097539703432165},
  doi          = {10.1137/S0097539703432165},
  timestamp    = {Wed, 14 Nov 2018 10:45:08 +0100},
  biburl       = {https://dblp.org/rec/journals/siamcomp/Tonder04.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{zhou2019applied,
author = {Zhou, Li and Yu, Nengkun and Ying, Mingsheng}, title = {An applied quantum Hoare logic}, year = {2019}, isbn = {9781450367127}, publisher = {Association for Computing Machinery}, address = {New York, NY, USA}, url = {https://doi.org/10.1145/3314221.3314584}, doi = {10.1145/3314221.3314584}, abstract = {We derive a variant of quantum Hoare logic (QHL), called applied quantum Hoare logic (aQHL for short), by: 1. restricting QHL to a special class of preconditions and postconditions, namely projections, which can significantly simplify verification of quantum programs and are much more convenient when used in debugging and testing; and 2. adding several rules for reasoning about robustness of quantum programs, i.e. error bounds of outputs. The effectiveness of aQHL is shown by its applications to verify two sophisticated quantum algorithms: HHL (Harrow-Hassidim-Lloyd) for solving systems of linear equations and qPCA (quantum Principal Component Analysis).}, booktitle = {Proceedings of the 40th ACM SIGPLAN Conference on Programming Language Design and Implementation}, pages = {1149–1162}, numpages = {14}, keywords = {Hoare logic, Quantum computation, programming languages, projections, robustness}, location = {Phoenix, AZ, USA}, series = {PLDI 2019} }

@article{ying2013verification,
  title={Verification of quantum programs},
  author={Ying, Mingsheng and Yu, Nengkun and Feng, Yuan and Duan, Runyao},
  journal={Science of Computer Programming},
  volume={78},
  number={9},
  pages={1679--1700},
  year={2013},
  publisher={Elsevier}
}

@article{hong2024equivalence,
 title={Equivalence Checking of Parameterised Quantum Circuits}, 
      author={Xin Hong and Wei-Jia Huang and Wei-Chen Chien and Yuan Feng and Min-Hsiu Hsieh and Sanjiang Li and Mingsheng Ying},
      year={2024},
      eprint={2404.18456},
      archivePrefix={arXiv},
      primaryClass={quant-ph},
      url={https://arxiv.org/abs/2404.18456}, 
}

@inproceedings{rao1994simple,
  title={Simple termination of hierarchical combinations of term rewriting systems},
  author={Rao, MRK Krishna},
  booktitle={International Symposium on Theoretical Aspects of Computer Software},
  pages={203--223},
  year={1994},
  organization={Springer}
}

@article{Harrow2009,
  title = {Quantum Algorithm for Linear Systems of Equations},
  author = {Harrow, Aram W. and Hassidim, Avinatan and Lloyd, Seth},
  journal = {Phys. Rev. Lett.},
  volume = {103},
  issue = {15},
  pages = {150502},
  numpages = {4},
  year = {2009},
  month = {Oct},
  publisher = {American Physical Society},
  doi = {10.1103/PhysRevLett.103.150502},
  url = {https://link.aps.org/doi/10.1103/PhysRevLett.103.150502}
}

@article{Zhou2023,
author = {Zhou, Li and Barthe, Gilles and Strub, Pierre-Yves and Liu, Junyi and Ying, Mingsheng},
title = {Coq{Q}: Foundational Verification of Quantum Programs},
year = {2023},
issue_date = {January 2023},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {7},
number = {POPL},
url = {https://doi.org/10.1145/3571222},
doi = {10.1145/3571222},
abstract = {CoqQ is a framework for reasoning about quantum programs in the Coq proof assistant. Its main components are: a deeply embedded quantum programming language, in which classic quantum algorithms are easily expressed, and an expressive program logic for proving properties of programs. CoqQ is foundational: the program logic is formally proved sound with respect to a denotational semantics based on state-of-art mathematical libraries (MathComp and MathComp Analysis). CoqQ is also practical: assertions can use Dirac expressions, which eases concise specifications, and proofs can exploit local and parallel reasoning, which minimizes verification effort. We illustrate the applicability of CoqQ with many examples from the literature.},
journal = {Proc. ACM Program. Lang.},
month = {jan},
articleno = {29},
numpages = {33},
keywords = {Mathematical Libraries, Program Logics, Proof Assistants, Quantum Programs}
}

@article{Lewis2023,
   abstract = {Over the past 27 years, quantum computing has seen a huge rise in interest from both academia and industry. At the current rate, quantum computers are growing in size rapidly backed up by the increase of research in the field. Significant efforts are being made to improve the reliability of quantum hardware and to develop suitable software to program quantum computers.In contrast, the verification of quantum programs has received relatively less attention. Verifying programs is especially important in the quantum setting due to how difficult it is to program complex algorithms correctly on resource-constrained and error-prone quantum hardware. Research into creating verification frameworks for quantum programs has seen recent development, with a variety of tools implemented using a collection of theoretical ideas.This survey aims to be a short introduction into the area of formal verification of quantum programs, bringing together theory and tools developed to date. Further, this survey examines some of the challenges that the field may face in the future, namely the development of complex quantum algorithms.},
   author = {Marco Lewis and Sadegh Soudjani and Paolo Zuliani},
   doi = {10.1145/3624483},
   issn = {26436817},
   issue = {1},
   journal = {ACM Transactions on Quantum Computing},
   keywords = {Additional Key Words and PhrasesQuantum programming,formal verification,theorem provers},
   month = {12},
   publisher = {Association for Computing Machinery},
   title = {Formal Verification of Quantum Programs: Theory, Tools, and Challenges},
   volume = {5},
   year = {2023},
}
@article{symQV,
   abstract = {We present symQV, a symbolic execution framework for writing and verifying quantum computations in the quantum circuit model. symQV can automatically verify that a quantum program complies with a first-order specification. We formally introduce a symbolic quantum program model. This allows to encode the verification problem in an SMT formula, which can then be checked with a -complete decision procedure. We also propose an abstraction technique to speed up the verification process. Experimental results show that the abstraction improves symQV ’s scalability by an order of magnitude to quantum programs with 24 qubits (a -dimensional state space).},
   author = {Fabian Bauer-Marquart and Stefan Leue and Christian Schilling},
   doi = {10.1007/978-3-031-27481-7_12},
   isbn = {9783031274800},
   issn = {16113349},
   journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
   keywords = {Abstraction,Formal verification,Quantum computing,Symbolic execution},
   pages = {181-198},
   publisher = {Springer Science and Business Media Deutschland GmbH},
   title = {symQV: Automated Symbolic Verification of Quantum Programs},
   volume = {14000 LNCS},
   year = {2023},
}

@article{Paykin2017,
   abstract = {This paper introduces QWIRE (``choir''), a language for defining quantum circuits and an interface for manipulating them inside of an arbitrary classical host language. QWIRE is minimal---it contains only a few primitives---and sound with respect to the physical properties entailed by quantum mechanics. At the same time, QWIRE is expressive and highly modular due to its relationship with the host language, mirroring the QRAM model of computation that places a quantum computer (controlled by circuits) alongside a classical computer (controlled by the host language).We present QWIRE along with its type system and operational semantics, which we prove is safe and strongly normalizing whenever the host language is. We give circuits a denotational semantics in terms of density matrices. Throughout, we investigate examples that demonstrate the expressive power of QWIRE, including extensions to the host language that (1) expose a general analysis framework for circuits, and (2) provide dependent types.},
   author = {Jennifer Paykin and Robert Rand and Steve Zdancewic},
   doi = {10.1145/3093333.3009894},
   issn = {0362-1340},
   issue = {1},
   journal = {ACM SIGPLAN Notices},
   month = {5},
   pages = {846-858},
   publisher = {Association for Computing Machinery (ACM)},
   title = {QWIRE: a core language for quantum circuits},
   volume = {52},
   year = {2017},
}
@article{Quipper,
   abstract = {The field of quantum algorithms is vibrant. Still, there is currently a lack of programming languages for describing quantum computation on a practical scale, i.e., not just at the level of toy problems. We address this issue by introducing Quipper, a scalable, expressive , functional, higher-order quantum programming language. Quipper has been used to program a diverse set of non-trivial quantum algorithms, and can generate quantum gate representations using trillions of gates. It is geared towards a model of computation that uses a classical computer to control a quantum device, but is not dependent on any particular model of quantum hardware. Quip-per has proven effective and easy to use, and opens the door towards using formal methods to analyze quantum algorithms.},
   author = {Alexander S Green and Peter LeFanu Lumsdaine and Neil J Ross and DalCa Peter Selinger and BenoˆıtBenoˆıt Valiron},
   journal = {dl.acm.org},
   keywords = {()},
   title = {Quipper: a scalable quantum programming language},
   url = {https://dl.acm.org/doi/abs/10.1145/2491956.2462177},
}


@book{ying2016foundations,
  title={Foundations of quantum programming},
  author={Ying, Mingsheng},
  year={2016},
  publisher={Morgan Kaufmann}
}

@inproceedings{dirac1939new,
  title={A new notation for quantum mechanics},
  author={Dirac, Paul Adrien Maurice},
  booktitle={Mathematical proceedings of the Cambridge philosophical society},
  volume={35},
  number={3},
  pages={416--418},
  year={1939},
  DOI={10.1017/S0305004100021162},
  organization={Cambridge University Press}
}

@book{Ohlebusch2002,
   author = {Enno Ohlebusch},
   publisher = {Springer Science \& Business Media},
   title = {Advanced topics in term rewriting},
   year = {2002},
   doi = {https://doi.org/10.1007/978-1-4757-3661-8},
}

@article{Gramlich1994,
   abstract = {Modular properties of term rewriting systems, i.e. properties which are preserved under disjoint unions, have attracted an increasing attention within the last few years. Whereas confluence is modular this does not hold true in general for termination. By means of a careful analysis of potential counterexamples we prove the following abstract result. Whenever the disjoint union ℛ1 ⊕ ℛ2 of two (finitely branching) terminating term rewriting systems ℛ1, ℛ2 is non-terminating, then one of the systems, say ℛ1, enjoys an interesting (undecidable) property, namely it is not termination preserving under non-deterministic collapses, i.e. ℛ1 ⊕ \{itG(x, y)→ x, G(x, y) → y\} is non-terminating, and the other system ℛ2 is collapsing, i.e. contains a rule with a variable right hand side. This result generalizes known sufficient criteria for modular termination of rewriting and provides the basis for a couple of derived modularity results. Furthermore, we prove that the minimal rank of potential counterexamples in disjoint unions may be arbitrarily high which shows that interaction of systems in such disjoint unions may be very subtle. Finally, extensions and generalizations of our main results in various directions are discussed. In particular, we show how to generalize the main results to some restricted form of non-disjoint combinations of term rewriting systems, namely for 'combined systems with shared constructors'. © 1994 Springer-Verlag.},
   author = {Bernhard Gramlich},
   doi = {10.1007/BF01190827/METRICS},
   issn = {09381279},
   issue = {3-4},
   journal = {Applicable Algebra in Engineering, Communication and Computing},
   keywords = {Combination,Disjoint union,Modularity,Term rewriting systems,Termination},
   month = {5},
   pages = {131-158},
   publisher = {Springer-Verlag},
   title = {Generalized sufficient conditions for modular termination of rewriting},
   volume = {5},
   url = {https://link.springer.com/article/10.1007/BF01190827},
   year = {1994},
}

@article{Claude2004,
   abstract = {Termination is a non-modular property of rewriting systems, thus it is a difficult task to discover termination proofs for rewriting systems of a large number of rules. Recently, new modular and incremental termination criteria, suitable for automation, were proposed, using an approach based on notions of termination under non-deterministic collapse and dependency pairs, which apply to hierarchical combinations of rewriting systems. We extend this approach and corresponding results to the important case of rewriting modulo associativity and commutativity. © 2004 Elsevier Ltd. All rights reserved.},
   author = {Claude Marché and Xavier Urbain},
   doi = {10.1016/J.JSC.2004.02.003},
   issn = {0747-7171},
   issue = {1},
   journal = {Journal of Symbolic Computation},
   keywords = {Automation,Modularity,Rewriting,Termination},
   month = {7},
   pages = {873-897},
   publisher = {Academic Press},
   title = {Modular and incremental proofs of AC-termination},
   volume = {38},
   year = {2004},
}

@article{Giesl2006,
   abstract = {AProVE 1.2 is one of the most powerful systems for automated termination proofs of term rewrite systems (TRSs). It is the first tool which automates the new dependency pair framework [8] and therefore permits a completely flexible combination of different termination proof techniques. Due to this framework, AProVE 1.2 is also the first termination prover which can be fully configured by the user. © Springer-Verlag Berlin Heidelberg 2006.},
   author = {Jürgen Giesl and Peter Schneider-Kamp and René Thiemann},
   doi = {10.1007/11814771_24},
   isbn = {3540371877},
   issn = {16113349},
   journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
   pages = {281-286},
   publisher = {Springer Verlag},
   title = {AProVE 1.2: Automatic termination proofs in the dependency pair framework},
   volume = {4130 LNAI},
   year = {2006},
}



@article{Giesl2002,
   abstract = {Recently, Arts and Giesl developed the dependency pair approach which allows automated termination and innermost termination proofs for many term rewriting systems (TRSs) for which such proofs were not possible before. The motivation for this approach was that virtually all previous techniques for automated termination proofs of TRSs were based on simplification orderings. In practice, however, many rewrite systems are not simply terminating, i.e. their termination cannot be verified by any simplification ordering. In this paper we introduce a refinement of the dependency pair framework which further extends the class of TRSs for which termination or innermost termination can be shown automatically. By means of this refinement, one can now prove termination in a modular way. Thus, this refinement is inevitable in order to verify the termination of large rewrite systems occurring in practice. To be more precise, one may use several different orderings in one termination proof. Subsequently, we present several new modularity results based on dependency pairs. First, we show that the well-known modularity of simple termination for disjoint unions can be extended to DP quasi-simple termination, i.e. to the class of rewrite systems where termination can be shown automatically by the dependency pair technique in combination with quasi-simplification orderings. Under certain additional conditions, this new result also holds for constructor-sharing and composable systems. Second, the above-mentioned refinement of the dependency pair method yields new modularity criteria for innermost termination which extend previous results in this area considerably. In particular, existing results for modularity of innermost termination can easily be shown to be direct consequences of our new criteria. © 2002 Elsevier Science Ltd. All rights reserved.},
   author = {Jürgen Giesl and Thomas Arts and Enno Ohlebusch},
   doi = {10.1006/JSCO.2002.0541},
   issn = {0747-7171},
   issue = {1},
   journal = {Journal of Symbolic Computation},
   month = {7},
   pages = {21-58},
   publisher = {Academic Press},
   title = {Modular Termination Proofs for Rewriting Using Dependency Pairs},
   volume = {34},
   year = {2002},
}

@article{Arts2000,
   abstract = {We present techniques to prove termination and innermost termination of term rewriting systems automatically. In contrast to previous approaches, we do not compare left- and right-hand sides of rewrite rules, but introduce the notion of dependency pairs to compare left-hand sides with special subterms of the right-hand sides. This results in a technique which allows to apply existing methods for automated termination proofs to term rewriting systems where they failed up to now. In particular, there are numerous term rewriting systems where a direct termination proof with simplification orderings is not possible, but in combination with our technique, well-known simplification orderings (such as the recursive path ordering, polynomial orderings, or the Knuth-Bendix ordering) can now be used to prove termination automatically. Unlike previous methods, our technique for proving innermost termination automatically can also be applied to prove innermost termination of term rewriting systems that are not terminating. Moreover, as innermost termination implies termination for certain classes of term rewriting systems, this technique can also be used for termination proofs of such systems. © 2000 Elsevier Science B.V. All rights reserved.},
   author = {Thomas Arts and Jürgen Giesl},
   doi = {10.1016/S0304-3975(99)00207-8},
   issn = {0304-3975},
   issue = {1-2},
   journal = {Theoretical Computer Science},
   keywords = {Automated theorem proving,Dependency pairs,Term rewriting,Termination,Verification},
   month = {4},
   pages = {133-178},
   publisher = {Elsevier},
   title = {Termination of term rewriting using dependency pairs},
   volume = {236},
   year = {2000},
}


@article{Arrighi2017,
	abstract = {We provide a computational definition of the notions of vector space and bilinear functions. We use this result to introduce a minimal language combining higher-order computation and linear algebra. This language extends the Lambda-calculus with the possibility to make arbitrary linear combinations of terms alpha.t + beta.u. We describe how to "execute" this language in terms of a few rewrite rules, and justify them through the two fundamental requirements that the language be a language of linear operators, and that it be higher-order. We mention the perspectives of this work in the field of quantum computation, whose circuits we show can be easily encoded in the calculus. Finally, we prove the confluence of the entire calculus.},
	author = {Pablo Arrighi and Gilles Dowek},
	doi = {10.23638/LMCS-13(1:8)2017},
	issn = {1860-5974},
	issue = {1},
	journal = {Logical Methods in Computer Science},
	keywords = {03B40,68N18,81P68,Computer Science,F.1.1,F.4.1,F.4.2,Logic in Computer Science,Programming Languages,Quantum Physics},
	month = {3},
	pages = {1-33},
	publisher = {Episciences.org},
	title = {Lineal: A linear-algebraic Lambda-calculus},
	url = {https://lmcs.episciences.org/3203},
	volume = {Volume 13, Issue 1},
	year = {2017},
	bdsk-url-1 = {https://lmcs.episciences.org/3203},
	bdsk-url-2 = {https://doi.org/10.23638/LMCS-13(1:8)2017}}

@article{Biamonte2017,
	abstract = {Tensor network methods are taking a central role in modern quantum physics and beyond. They can provide an efficient approximation to certain classes of quantum states, and the associated graphical language makes it easy to describe and pictorially reason about quantum circuits, channels, protocols, open systems and more. Our goal is to explain tensor networks and some associated methods as quickly and as painlessly as possible. Beginning with the key definitions, the graphical tensor network language is presented through examples. We then provide an introduction to matrix product states. We conclude the tutorial with tensor contractions evaluating combinatorial counting problems. The first one counts the number of solutions for Boolean formulae, whereas the second is Penrose's tensor contraction algorithm, returning the number of $3$-edge-colorings of $3$-regular planar graphs.},
	author = {Jacob Biamonte and Ville Bergholm},
	month = {7},
	title = {Tensor Networks in a Nutshell},
	url = {https://arxiv.org/abs/1708.00006v1},
	year = {2017},
	bdsk-url-1 = {https://arxiv.org/abs/1708.00006v1}}

@article{Baader1998,
	abstract = {Intended for students and professionals, this is the first English-language textbook offering a unified and self-contained introduction to the field of term rewriting. 1. Motivating Examples -- 2. Abstract Reduction Systems. 2.1. Equivalence and reduction. 2.2. Well-founded induction. 2.3. Proving termination. 2.4. Lexicographic orders. 2.5. Multiset orders. 2.6. Orders in ML. 2.7. Proving confluence. 2.8. Bibliographic notes -- 3. Universal Algebra. 3.1. Terms, substitutions, and identities. 3.2. Algebras, homomorphisms, and congruences. 3.3. Free algebras. 3.4. Term algebras. 3.5. Equational classes -- 4. Equational Problems. 4.1. Deciding [actual symbol not reproducible] E. 4.2. Term rewriting systems. 4.3. Congruence closure. 4.4. Congruence closure on graphs. 4.5. Syntactic unification. 4.6. Unification by transformation. 4.7. Unification and term rewriting in ML.},
	author = {Franz. Baader and Tobias Nipkow},
	isbn = {0 521 45520 0},
	pages = {301},
	publisher = {Cambridge University Press},
	title = {Term rewriting and all that},
	url = {https://books.google.com/books/about/Term_Rewriting_and_All_That.html?hl=zh-CN&id=N7BvXVUCQk8C},
	year = {1998},
	bdsk-url-1 = {https://books.google.com/books/about/Term_Rewriting_and_All_That.html?hl=zh-CN&id=N7BvXVUCQk8C}}

@article{Peterson1981,
	abstract = {An extenston of the Knuth-Bendix algorithm for finding complete sets of reductions is described. The extension is intended to handle equational theories which can be split into two parts, R and T, such that each equation m R can be construed as a reduction and T represents an equational theory for which a finite, complete umfication algorithm as known. The extension ts demonstrated in the case when T is the theory of a fimte number of associaUve and commutatwe functions and to which the extension is presently restricted An tmplementatlon of the extended Knuth-Bendtx algorithm has produced complete sets of reductions for free commutative groups, commutative rings wtth umt, and distributive lattices. {\copyright} 1981, ACM. All rights reserved.},
	author = {Gerald E. Peterson and Mark E. Stickel},
	doi = {10.1145/322248.322251},
	issn = {1557735X},
	issue = {2},
	journal = {Journal of the ACM (JACM)},
	keywords = {Boolean algebra,associative and commutative functions,commutative group,commutative ring,complete sets of reductions,complete unification algorithms,equational theories,finite termination property,lattice,simplification,theorem proving,unique termination property,well-founded partml order},
	month = {4},
	pages = {233-264},
	title = {Complete Sets of Reductions for Some Equational Theories},
	volume = {28},
	year = {1981},
	bdsk-url-1 = {https://doi.org/10.1145/322248.322251}}

@article{Jouannaud1984,
	author = {Jean-Pierre Jouannaud and Helene Kirchner},
	city = {New York, New York, USA},
	doi = {10.1145/800017.800519},
	isbn = {0897911253},
	journal = {Proceedings of the 11th ACM SIGACT-SIGPLAN symposium on Principles of programming languages - POPL '84},
	pages = {83-92},
	publisher = {ACM Press},
	title = {Completion of a set of rules modulo a set of equations},
	url = {http://portal.acm.org/citation.cfm?doid=800017.800519},
	year = {1984},
	bdsk-url-1 = {http://portal.acm.org/citation.cfm?doid=800017.800519},
	bdsk-url-2 = {https://doi.org/10.1145/800017.800519}}

@article{Hietala2021,
	abstract = {We present VOQC, the first fully verified optimizer for quantum circuits, written using the Coq proof assistant. Quantum circuits are expressed as programs in a simple, low-level language called SQ...},
	author = {Kesha Hietala and Robert Rand and Shih Han Hung and Xiaodi Wu and Michael Hicks},
	doi = {10.1145/3434318},
	issn = {24751421},
	issue = {POPL},
	journal = {Proceedings of the ACM on Programming Languages},
	keywords = {Certified Compilation,Circuit Optimization,Formal Verification,Programming Languages,Quantum Computing},
	month = {1},
	pages = {29},
	publisher = {ACM PUB27 New York, NY, USA},
	title = {A verified optimizer for Quantum circuits},
	url = {https://dl.acm.org/doi/10.1145/3434318},
	volume = {5},
	year = {2021},
	bdsk-url-1 = {https://dl.acm.org/doi/10.1145/3434318},
	bdsk-url-2 = {https://doi.org/10.1145/3434318}}

@article{Arrighi2005b,
	abstract = {With a view towards models of quantum computation and/or the interpretation of linear logic, we define a functional language where all functions are linear operators by construction. A small step operational semantic (and hence an interpreter/simulator) is provided for this language in the form of a term rewrite system. The linear-algebraic lambda-calculus hereby constructed is linear in a different (yet related) sense to that, say, of the linear lambda-calculus. These various notions of linearity are discussed in the context of quantum programming languages. KEYWORDS: quantum lambda-calculus, linear lambda-calculus, $\lambda$-calculus, quantum logics.},
	author = {Pablo Arrighi and Gilles Dowek},
	date-modified = {2024-06-06 15:16:52 +0800},
	month = {1},
	title = {Linear-algebraic lambda-calculus},
	url = {https://arxiv.org/abs/quant-ph/0501150v1},
	year = {2005},
	bdsk-url-1 = {https://arxiv.org/abs/quant-ph/0501150v1}}

@article{Klop1989,
	abstract = {We consider the equational theory λπ of λ-calculus extended with constants π, π0, π1 and axioms for surjective pairing: π0(πXY) = X, π1(πXY) = Y, π(π0X)(π1X) = X. Two reduction systems yielding the equality of λπ are introduced; the first is not confluent and, for the second, confluence is an open problem. It is shown, however, that in both systems each term possessing a normal form has a unique normal form. Some additional properties and problems in the syntactical analysis of λπ and the corresponding reduction systems are discussed. {\copyright} 1989.},
	author = {J. W. Klop and R. C. de Vrijer},
	doi = {10.1016/0890-5401(89)90014-X},
	issn = {0890-5401},
	issue = {2},
	journal = {Information and Computation},
	month = {2},
	pages = {97-113},
	publisher = {Academic Press},
	title = {Unique normal forms for lambda calculus with surjective pairing},
	volume = {80},
	year = {1989},
	bdsk-url-1 = {https://doi.org/10.1016/0890-5401(89)90014-X}}

@article{Solovay2012,
	abstract = {We carry out a systematic study of decidability for theories (a) of real vector spaces, inner product spaces, and Hilbert spaces and (b) of normed spaces, Banach spaces and metric spaces, all formalised using a 2-sorted first-order language. The theories for list (a) turn out to be decidable while the theories for list (b) are not even arithmetical: the theory of 2-dimensional Banach spaces, for example, has the same many-one degree as the set of truths of second-order arithmetic. We find that the purely universal and purely existential fragments of the theory of normed spaces are decidable, as is the ∀∃ fragment of the theory of metric spaces. These results are sharp of their type: reductions of Hilbert's 10 th problem show that the ∃∀ fragments for metric and normed spaces and the ∀∃ fragment for normed spaces are all undecidable.},
	author = {Robert M Solovay and R D Arthan and John Harrison},
	keywords = {Banach spaces,Decidability,Hilbert spaces,inner product spaces,metric spaces,normed spaces,undecidability,vector spaces},
	title = {Some new results on decidability for elementary algebra and geometry},
	year = {2012}}

@article{Bertot2008,
	abstract = {In this paper, we present an approach to describe uniformly iterated "big" operations, like or max i∈ ∈I f(i) and to provide lemmas that encapsulate all the commonly used reasoning steps on these constructs. We show that these iterated operations can be handled generically using the syntactic notation and canonical structure facilities provided by the Coq system. We then show how these canonical big operations played a crucial enabling role in the study of various parts of linear algebra and multi-dimensional real analysis, as illustrated by the formal proofs of the properties of determinants, of the Cayley-Hamilton theorem and of Kantorovitch's theorem. {\copyright} 2008 Springer Berlin Heidelberg.},
	author = {Yves Bertot and Georges Gonthier and Sidi Ould Biha and Ioana Pasca},
	doi = {10.1007/978-3-540-71067-7_11/COVER},
	isbn = {3540710655},
	issn = {16113349},
	journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
	pages = {86-101},
	publisher = {Springer Verlag},
	title = {Canonical big operators},
	url = {https://link.springer.com/chapter/10.1007/978-3-540-71067-7_11},
	volume = {5170 LNCS},
	year = {2008},
	bdsk-url-1 = {https://link.springer.com/chapter/10.1007/978-3-540-71067-7_11},
	bdsk-url-2 = {https://doi.org/10.1007/978-3-540-71067-7_11/COVER}}

@article{Arrighi2005,
	abstract = {We usually define an algebra by a set, some operations defined on this set and some propositions that the algebra must validate. In some cases, we can replace these propositions by an algorithm on terms constructed upon these operations that the algebra must validate. We show in this note that this is the case for the notion of vectorial space and bilinear function. {\copyright} 2005 Elsevier B.V.},
	author = {Pablo Arrighi and Gilles Dowek},
	doi = {10.1016/J.ENTCS.2004.06.013},
	issn = {1571-0661},
	issue = {SPEC. ISS.},
	journal = {Electronic Notes in Theoretical Computer Science},
	keywords = {Bilinear function,Rewrite system,Tensorial product,Vectorial space},
	month = {1},
	pages = {249-261},
	publisher = {Elsevier},
	title = {A Computational Definition of the Notion of Vectorial Space},
	volume = {117},
	year = {2005},
	bdsk-url-1 = {https://doi.org/10.1016/J.ENTCS.2004.06.013}}

@article{Ferreira1993,
	abstract = {We investigate proving termination of term rewriting systems by interpretation of terms in a compositional way in a total wellfounded order. This kind of termination is called total termination. On one hand it is more restrictive than simple termination, on the other...},
	author = {M. C. F. Ferreira and H. Zantema},
	doi = {10.1007/978-3-662-21551-7_17},
	isbn = {978-3-662-21551-7},
	issn = {1611-3349},
	pages = {213-227},
	publisher = {Springer, Berlin, Heidelberg},
	title = {Total termination of term rewriting},
	url = {https://link.springer.com/chapter/10.1007/978-3-662-21551-7_17},
	year = {1993},
	bdsk-url-1 = {https://link.springer.com/chapter/10.1007/978-3-662-21551-7_17},
	bdsk-url-2 = {https://doi.org/10.1007/978-3-662-21551-7_17}}

@article{Zantema1994,
	abstract = {We investigate proving termination of term rewriting systems by interpretation of terms in a well-founded monotone algebra. The well-known polynomial interpretations can be considered as a particular case in this framework. A classification of types of termination, including simple termination, is proposed based on properties in the semantic level. A transformation on term rewriting systems eliminating distributive rules is introduced. Using this distribution elimination a new termination proof of the system SUBST of Hardin and Laville (1986) is given. This system describes explicit substitution in λ-calculus. Another tool for proving termination is based on introduction and removal of type restrictions. A property of many-sorted term rewriting systems is called persistent if it is not affected by removing the corresponding typing restriction. Persistence turns out to be a generalization of direct sum modularity, but is more powerful for both proving confluence and termination. Termination is proved to be persistent for the class of term rewriting systems for which not both duplicating rules and collapsing rules occur, generalizing a similar result of Rusinowitch for modularity. This result has nice applications, in particular in undecidability proofs. {\copyright} 1994 Academic Press Limited.},
	author = {H. Zantema},
	doi = {10.1006/JSCO.1994.1003},
	issn = {0747-7171},
	issue = {1},
	journal = {Journal of Symbolic Computation},
	month = {1},
	pages = {23-50},
	publisher = {Academic Press},
	title = {Termination of term rewriting: interpretation and type elimination},
	volume = {17},
	year = {1994},
	bdsk-url-1 = {https://doi.org/10.1006/JSCO.1994.1003}}

@article{Contejean2011,
	abstract = {We present the rewriting toolkit CiME3. Amongst other original features, this version enjoys two kinds of engines: to handle and discover proofs of various properties of rewriting systems, and to generate Coq scripts from proof traces given in certification problem format in order to certify them with a sceptical proof assistant like Coq. Thus, these features open the way for using CiME3 to add automation to proofs of termination or confluence in a formal development in the Coq proof assistant. {\copyright} {\'E}velyne Contejean, Pierre Courtieu, Julien Forest, Olivier Pons, Xavier Urbain.},
	author = {{\'E}velyne Contejean and Pierre Courtieu and Julien Forest and Olivier Pons and Xavier Urbain},
	doi = {10.4230/LIPICS.RTA.2011.21/-/STATS},
	isbn = {9783939897309},
	issn = {18688969},
	journal = {Leibniz International Proceedings in Informatics, LIPIcs},
	keywords = {Formal proof,Proof automation,Rewriting,Roof assistant},
	pages = {21-30},
	publisher = {Schloss Dagstuhl -- Leibniz-Zentrum f{\"u}r Informatik},
	title = {Automated certified proofs with CiME3},
	url = {http://joerg.endrullis.de/jambox.html},
	volume = {10},
	year = {2011},
	bdsk-url-1 = {http://joerg.endrullis.de/jambox.html},
	bdsk-url-2 = {https://doi.org/10.4230/LIPICS.RTA.2011.21/-/STATS}}


@article{Aoto1997,
   author = {Takahito Aoto and Yoshihito Toyama},
   issue = {11},
   journal = {J. Univers. Comput. Sci.},
   pages = {1134-1147},
   publisher = {Citeseer},
   title = {Persistency of Confluence.},
   volume = {3},
   year = {1997},
}

@book{Nielsen2010, place={Cambridge}, title={Quantum Computation and Quantum Information: 10th Anniversary Edition}, publisher={Cambridge University Press}, author={Nielsen, Michael A. and Chuang, Isaac L.}, year={2010}, doi = {https://doi.org/10.1017/CBO9780511976667}} 

@misc{WolframLanguage,
   author = {Wolfram Research},
   note = {Accessed: 2024-06-06},
   title = {https://www.wolfram.com/language/},
   url = {https://www.wolfram.com/language/},
   year = {2024},
}

@article{Tarski1998,
   abstract = {By a decision method for a class K of sentence (or other expressions) is meant a method by means of which, given any sentence θ, one can always decide in a finite number of steps whether θ is in K; by a decision problem for a class K we mean the problem of finding a decision method for K. A decision method must be like a recipe, which tells one what to do at each steps so that no intelligence is required to follow it; and the method can be applied by anyone so long as he is able to read and follow directions.},
   author = {Alfred Tarski},
   doi = {10.1007/978-3-7091-9459-1_3},
   pages = {24-84},
   title = {A Decision Method for Elementary Algebra and Geometry},
   year = {1998},
}


@article{DBLP:journals/apal/SolovayAH12,
  author       = {Robert Solovay and
                  R. D. Arthan and
                  John Harrison},
  title        = {Some new results on decidability for elementary algebra and geometry},
  journal      = {Ann. Pure Appl. Log.},
  volume       = {163},
  number       = {12},
  pages        = {1765--1802},
  year         = {2012},
  url          = {https://doi.org/10.1016/j.apal.2012.04.003},
  doi          = {10.1016/J.APAL.2012.04.003},
  timestamp    = {Fri, 21 Feb 2020 21:18:29 +0100},
  biburl       = {https://dblp.org/rec/journals/apal/SolovayAH12.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@PhdThesis{Granger99,
  author = 	 {Nicolas Granger},
  title = 	 {Stability, Simplicity and the Model Theory of Bilinear Forms},
  school = 	 {University of Manchester},
  year = 	 {1999}
}

@inproceedings{DBLP:conf/lics/AbramskyC04,
  author       = {Samson Abramsky and
                  Bob Coecke},
  title        = {A Categorical Semantics of Quantum Protocols},
  booktitle    = {19th {IEEE} Symposium on Logic in Computer Science {(LICS} 2004),
                  14-17 July 2004, Turku, Finland, Proceedings},
  pages        = {415--425},
  publisher    = {{IEEE} Computer Society},
  year         = {2004},
  url          = {https://doi.org/10.1109/LICS.2004.1319636},
  doi          = {10.1109/LICS.2004.1319636},
  timestamp    = {Fri, 24 Mar 2023 00:01:49 +0100},
  biburl       = {https://dblp.org/rec/conf/lics/AbramskyC04.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/lics/Abramsky04,
  author       = {Samson Abramsky},
  title        = {High-Level Methods for Quantum Computation and Information},
  booktitle    = {19th {IEEE} Symposium on Logic in Computer Science {(LICS} 2004),
                  14-17 July 2004, Turku, Finland, Proceedings},
  pages        = {410--414},
  publisher    = {{IEEE} Computer Society},
  year         = {2004},
  url          = {https://doi.org/10.1109/LICS.2004.1319635},
  doi          = {10.1109/LICS.2004.1319635},
  timestamp    = {Fri, 24 Mar 2023 00:01:50 +0100},
  biburl       = {https://dblp.org/rec/conf/lics/Abramsky04.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{bordg2021certified,
  title={Certified quantum computation in {Isabelle/HOL}},
  author={Bordg, Anthony and Lachnitt, Hanna and He, Yijun},
  journal={Journal of Automated Reasoning},
  volume={65},
  number={5},
  pages={691--709},
  year={2021},
  doi = {https://doi.org/10.1007/s10817-020-09584-7},
  publisher={Springer}
}

@article{echenim2024formalization,
  title={A Formalization of the CHSH Inequality and Tsirelson’s Upper-bound in Isabelle/HOL},
  author={Echenim, Mnacho and Mhalla, Mehdi},
  journal={Journal of Automated Reasoning},
  volume={68},
  number={1},
  pages={2},
  year={2024},
  publisher={Springer},
  doi = {https://doi.org/10.1007/s10817-023-09689-9}
}

@Misc{mathcomp-analysis,
author = {{The MathComp Analysis Development Team}},
title = {{MathComp-Analysis}: Mathematical Components compliant Analysis Library},
howpublished = {\url{https://github.com/math-comp/analysis}},
year = {2022},
note = {Since 2017. Version 0.5.1}
}

@inproceedings{RPZ17,
  author    = {Robert Rand and
               Jennifer Paykin and
               Steve Zdancewic},
  editor    = {Bob Coecke and
               Aleks Kissinger},
  title     = {{QWIRE} Practice: Formal Verification of Quantum Circuits in Coq},
  booktitle = {Proceedings 14th International Conference on Quantum Physics and Logic,
               {QPL} 2017, Nijmegen, The Netherlands, 3-7 July 2017.},
  series    = {{EPTCS}},
  volume    = {266},
  pages     = {119--132},
  year      = {2017},
  url       = {https://doi.org/10.4204/EPTCS.266.8},
  doi       = {10.4204/EPTCS.266.8}
}

@article{HRH21,
	author = {Hietala, Kesha and Rand, Robert and Hung, Shih-Han and Wu, Xiaodi and Hicks, Michael},
	title = {A Verified Optimizer for Quantum Circuits},
	year = {2021},
	issue_date = {January 2021},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {5},
	number = {POPL},
	url = {https://doi.org/10.1145/3434318},
	doi = {10.1145/3434318},
	journal = {Proc. ACM Program. Lang.},
	month = {jan},
	articleno = {37},
	numpages = {29},
	keywords = {Programming Languages, Certified Compilation, Quantum Computing, Circuit Optimization, Formal Verification}
}

@ARTICLE{Kozen, 
title = {Kleene algebra with tests},
author = {Kozen, Dexter},
journal = {ACM Transactions on Programming Languages and Systems},
volume = 19, 
number = 3,
pages = {427--443}, 
year = 1997
}

@inproceedings{Staton15,
author = {Staton, Sam},
title = {Algebraic Effects, Linearity, and Quantum Programming Languages},
year = {2015},
isbn = {9781450333009},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2676726.2676999},
doi = {10.1145/2676726.2676999},
booktitle = {Proceedings of the 42nd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
pages = {395–406},
numpages = {12},
keywords = {quantum computation, monads., algebraic effects},
location = {Mumbai, India},
series = {POPL '15}
}

@article{Hoare87,
author = {Hoare, C. A. R. and Hayes, I. J. and Jifeng, He and Morgan, C. C. and Roscoe, A. W. and Sanders, J. W. and Sorensen, I. H. and Spivey, J. M. and Sufrin, B. A.},
title = {Laws of programming},
year = {1987},
issue_date = {Aug. 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {30},
number = {8},
issn = {0001-0782},
url = {https://doi.org/10.1145/27651.27653},
doi = {10.1145/27651.27653},
journal = {Commun. ACM},
month = {aug},
pages = {672–686},
numpages = {15}
}

@article{Unr19,
	author = {Unruh, Dominique},
	title = {Quantum Relational Hoare Logic},
	year = {2019},
	issue_date = {January 2019},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {3},
	number = {POPL},
	url = {https://doi.org/10.1145/3290346},
	doi = {10.1145/3290346},
	journal = {Proc. ACM Program. Lang.},
	month = {jan},
	articleno = {33},
	numpages = {31},
	keywords = {Hoare logics, Quantum cryptography, formal verification}
}

@article{BHY19,
	author = {Barthe, Gilles and Hsu, Justin and Ying, Mingsheng and Yu, Nengkun and Zhou, Li},
	title = {Relational Proofs for Quantum Programs},
	year = {2019},
	issue_date = {January 2020},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {4},
	number = {POPL},
	url = {https://doi.org/10.1145/3371089},
	doi = {10.1145/3371089},
	journal = {Proc. ACM Program. Lang.},
	month = {December},
	articleno = {21},
	numpages = {29},
	keywords = {verification, quantum programming, relational properties, coupling}
}

@inproceedings{YP21,
	author = {Yu, Nengkun and Palsberg, Jens},
	title = {Quantum Abstract Interpretation},
	year = {2021},
	isbn = {9781450383912},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3453483.3454061},
	doi = {10.1145/3453483.3454061},
	booktitle = {Proceedings of the 42nd ACM SIGPLAN International Conference on Programming Language Design and Implementation},
	pages = {542–558},
	numpages = {17},
	keywords = {abstract interpretation, scalability, quantum programming},
	location = {Virtual, Canada},
	series = {PLDI 2021}
}

@INPROCEEDINGS{ZBH21,
  author={Zhou, Li and Barthe, Gilles and Hsu, Justin and Ying, Mingsheng and Yu, Nengkun},
  booktitle={2021 36th Annual ACM/IEEE Symposium on Logic in Computer Science (LICS)}, 
  title={A Quantum Interpretation of Bunched Logic \& Quantum Separation Logic}, 
  year={2021},
  volume={},
  number={},
  pages={1-14},
  doi={10.1109/LICS52264.2021.9470673}}

@article{LLSS22,
author = {Le, Xuan-Bach and Lin, Shang-Wei and Sun, Jun and Sanan, David},
title = {A Quantum Interpretation of Separating Conjunction for Local Reasoning of Quantum Programs Based on Separation Logic},
year = {2022},
issue_date = {January 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {6},
number = {POPL},
url = {https://doi.org/10.1145/3498697},
doi = {10.1145/3498697},
journal = {Proc. ACM Program. Lang.},
month = {jan},
articleno = {36},
numpages = {27},
keywords = {Quantum Computing, Verification, Formal Semantics}
}

@article{qafny,
      title={Qafny: A Quantum-Program Verifier}, 
      author={Liyi Li and Mingwei Zhu and Rance Cleaveland and Alexander Nicolellis and Yi Lee and Le Chang and Xiaodi Wu},
      year={2024},
      eprint={2211.06411},
      archivePrefix={arXiv},
      primaryClass={quant-ph},
      url={https://arxiv.org/abs/2211.06411}, 
}

@article{singhal2022beyond,
  title={Beyond separation: Toward a specification language for modular reasoning about quantum programs},
  author={Singhal, Kartik and Rand, ROBERT and Amy, MATTHEW},
  journal={Programming Languages for Quantum Computing (PLanQC) 2022 Poster Abstract},
  year={2022}
}

@article{hietalaq,
  title={Q*: Implementing Quantum Separation Logic in F},
  author={Hietala, Kesha and Marshall, Sarah and Rand, Robert and Swamy, Nikhil}
}

@article{HHZ19,
author = {Hung, Shih-Han and Hietala, Kesha and Zhu, Shaopeng and Ying, Mingsheng and Hicks, Michael and Wu, Xiaodi},
title = {Quantitative robustness analysis of quantum programs},
year = {2019},
issue_date = {January 2019},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {3},
number = {POPL},
url = {https://doi.org/10.1145/3290344},
doi = {10.1145/3290344},
month = {jan},
articleno = {31},
numpages = {29},
keywords = {approximate computing, quantum noise, quantum programming}
}

@inproceedings{TSY21,
author = {Tao, Runzhou and Shi, Yunong and Yao, Jianan and Hui, John and Chong, Frederic T. and Gu, Ronghui},
title = {Gleipnir: toward practical error analysis for Quantum programs},
year = {2021},
isbn = {9781450383912},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3453483.3454029},
doi = {10.1145/3453483.3454029},
booktitle = {Proceedings of the 42nd ACM SIGPLAN International Conference on Programming Language Design and Implementation},
pages = {48–64},
numpages = {17},
keywords = {quantum programming, error analysis, approximate computing},
location = {Virtual, Canada},
series = {PLDI 2021}
}


@incollection{CVLreview,
  TITLE = {{Formal Methods for Quantum Algorithms}},
  AUTHOR = {Chareton, Christophe and Bardin, S{\'e}bastien and Lee, Dong Ho and Valiron, Beno{\^i}t and Vilmart, Renaud and Xu, Zhaowei},
  URL = {https://cea.hal.science/cea-04479879},
  BOOKTITLE = {{Handbook of Formal Analysis and Verification in Cryptography}},
  PUBLISHER = {{CRC Press}},
  SERIES = {Prospect in Pure and Applied Mathematics},
  PAGES = {319-422},
  YEAR = {2023},
  PDF = {https://cea.hal.science/cea-04479879/file/main.pdf},
  HAL_ID = {cea-04479879},
  HAL_VERSION = {v1},
}

@article{LSZreview,
author = {Lewis, Marco and Soudjani, Sadegh and Zuliani, Paolo},
title = {Formal Verification of Quantum Programs: Theory, Tools, and Challenges},
year = {2023},
issue_date = {March 2024},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {5},
number = {1},
url = {https://doi.org/10.1145/3624483},
doi = {10.1145/3624483},
month = {dec},
articleno = {1},
numpages = {35},
keywords = {Quantum programming, formal verification, theorem provers}
}

@article{Hiet21,
author = {Hietala, Kesha and Rand, Robert and Hung, Shih-Han and Wu, Xiaodi and Hicks, Michael},
title = {A verified optimizer for Quantum circuits},
year = {2021},
issue_date = {January 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {5},
number = {POPL},
url = {https://doi.org/10.1145/3434318},
doi = {10.1145/3434318},
month = {jan},
articleno = {37},
numpages = {29},
keywords = {Quantum Computing, Programming Languages, Formal Verification, Circuit Optimization, Certified Compilation}
}


@InProceedings{hietala2020proving,
  author =	{Hietala, Kesha and Rand, Robert and Hung, Shih-Han and Li, Liyi and Hicks, Michael},
  title =	{Proving Quantum Programs Correct},
  booktitle =	{12th International Conference on Interactive Theorem Proving (ITP 2021)},
  pages =	{21:1--21:19},
  series =	{Leibniz International Proceedings in Informatics (LIPIcs)},
  ISBN =	{978-3-95977-188-7},
  ISSN =	{1868-8969},
  year =	{2021},
  volume =	{193},
  editor =	{Cohen, Liron and Kaliszyk, Cezary},
  publisher =	{Schloss Dagstuhl -- Leibniz-Zentrum f{\"u}r Informatik},
  address =	{Dagstuhl, Germany},
  URL =		{https://drops.dagstuhl.de/opus/volltexte/2021/13916},
  URN =		{urn:nbn:de:0030-drops-139160},
  doi =		{10.4230/LIPIcs.ITP.2021.21},
  annote =	{Keywords: Formal Verification, Quantum Computing, Proof Engineering}
}


@InProceedings{LZW19,
author="Liu, Junyi
and Zhan, Bohua
and Wang, Shuling
and Ying, Shenggang
and Liu, Tao
and Li, Yangjia
and Ying, Mingsheng
and Zhan, Naijun",
editor="Dillig, Isil
and Tasiran, Serdar",
title="Formal Verification of Quantum Algorithms Using Quantum Hoare Logic",
booktitle="Computer Aided Verification",
year="2019",
publisher="Springer International Publishing",
address="Cham",
pages="187--207",
abstract="We formalize the theory of quantum Hoare logic (QHL) [TOPLAS 33(6),19], an extension of Hoare logic for reasoning about quantum programs. In particular, we formalize the syntax and semantics of quantum programs in Isabelle/HOL, write down the rules of quantum Hoare logic, and verify the soundness and completeness of the deduction system for partial correctness of quantum programs. As preliminary work, we formalize some necessary mathematical background in linear algebra, and define tensor products of vectors and matrices on quantum variables. As an application, we verify the correctness of Grover's search algorithm. To our best knowledge, this is the first time a Hoare logic for quantum programs is formalized in an interactive theorem prover, and used to verify the correctness of a nontrivial quantum algorithm.",
isbn="978-3-030-25543-5",
doi = "https://doi.org/10.1007/978-3-030-25543-5_12"
}



@article{bordg2020isabelle,
  title={Isabelle marries dirac: A library for quantum computation and quantum information},
  author={Bordg, Anthony and Lachnitt, Hanna and He, Yijun},
  journal={Archive of Formal Proofs},
  year={2020}
}

@article{Xu2023synthesize,
author = {Xu, Amanda and Molavi, Abtin and Pick, Lauren and Tannu, Swamit and Albarghouthi, Aws},
title = {Synthesizing Quantum-Circuit Optimizers},
year = {2023},
issue_date = {June 2023},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {7},
number = {PLDI},
url = {https://doi.org/10.1145/3591254},
doi = {10.1145/3591254},
month = {jun},
articleno = {140},
numpages = {25},
keywords = {quantum computing, probabilistic verification}
}

@inproceedings{Quartz,
author = {Xu, Mingkuan and Li, Zikun and Padon, Oded and Lin, Sina and Pointing, Jessica and Hirth, Auguste and Ma, Henry and Palsberg, Jens and Aiken, Alex and Acar, Umut A. and Jia, Zhihao},
title = {Quartz: superoptimization of Quantum circuits},
year = {2022},
isbn = {9781450392655},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3519939.3523433},
doi = {10.1145/3519939.3523433},
booktitle = {Proceedings of the 43rd ACM SIGPLAN International Conference on Programming Language Design and Implementation},
pages = {625–640},
numpages = {16},
keywords = {superoptimization, quantum computing},
location = {San Diego, CA, USA},
series = {PLDI 2022}
}

@inproceedings{Giallar,
author = {Tao, Runzhou and Shi, Yunong and Yao, Jianan and Li, Xupeng and Javadi-Abhari, Ali and Cross, Andrew W. and Chong, Frederic T. and Gu, Ronghui},
title = {Giallar: push-button verification for the qiskit Quantum compiler},
year = {2022},
isbn = {9781450392655},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3519939.3523431},
booktitle = {Proceedings of the 43rd ACM SIGPLAN International Conference on Programming Language Design and Implementation},
pages = {641–656},
numpages = {16},
keywords = {quantum computing, compiler verification, automated verification},
location = {San Diego, CA, USA},
series = {PLDI 2022}
}

@INPROCEEDINGS{Unruh2019ghost,
  author={Unruh, Dominique},
  booktitle={2019 34th Annual ACM/IEEE Symposium on Logic in Computer Science (LICS)}, 
  title={Quantum Hoare Logic with Ghost Variables}, 
  year={2019},
  volume={},
  number={},
  pages={1-13},
  keywords={Quantum entanglement;Quantum computing;Probabilistic logic;Computers;Cryptography;Semantics},
  doi={10.1109/LICS.2019.8785779}}
