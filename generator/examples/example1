



Var x : CVar[Bit].

Var q : QReg[Bit]. 
Var H : OType[Bit, Bit].
Var Hpf : Unitary H.

Check forall (x : QReg[Bit]), QReg[Bit].

Check fun ()

Prove oneopf : Proj (1O[Bit * Bit]_(q@1, q@2),(q@1, q@2)).
  sorry.
QED.

Prove zeroopf : Pos (0O[Bit * Bit, Bit * Bit]_(q@1, q@2),(q@1, q@2)).
  sorry.
QED.

Def OneObs := <
  1O[Bit*Bit]_(q@1, q@2),(q@1, q@2), 
  0O[Bit*Bit, Bit*Bit]_(q@1, q@2),(q@1, q@2)
>.

Var P0 : OType[Bit, Bit].
Var P1 : OType[Bit, Bit].
Def M := (P0, P1).

Prove Mpf : Meas M.
  sorry.
QED.

Prove mainpf :
  {true |-> OneObs}
    x <-$ Bit
    unitary H q
      ~
    init q
    unitary H q
    x := meas M q
  {x@1 == x@2 |-> OneObs}.
  

  seq_back (true |-> OneObs).
  (* Pause. *)
    (* Pause. *)

  r_unitary1.

  Pause.

  sorry.

QED.

