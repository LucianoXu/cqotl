
Var T : CTYPE.

Var A : OTYPE[T, T].

Var B : OTYPE[T, T].

Check true \/ false /\ false.
Check KTYPE[T].
Var t : CTERM[T].
Var x : CVAR[T].
Check (<t| @ |t>) ^D.

Check fun (x : CTERM[BIT]) => |x>.
Check SUM[USET[BIT], fun (x : CTERM[BIT]) => (<x| @ |x>) ^D].

Prove eqpf : (A + B) + 0O[T] = B + A.

    (* Pause. *)
    (* simpl. *)

    (* by_lean. *)
    (* Pause. *)
    sorry.

QED.

Var P : ASSN.
Var Q : ASSN.
Var R : ASSN.
Var s1 : PROG.
Var s2 : PROG.

Var M : OPTPAIR[T].
Var qs : QREG[T].
Var b : CVAR[BIT].

Check b := meas M qs. 


Prove pf : {P} skip; ~ skip; {P}.
  r_skip.
QED.

Var H : OTYPE[BIT, BIT].
Var P0 : OTYPE[BIT, BIT].
Var P1 : OTYPE[BIT, BIT].
(* Var q : QREG[BIT].
Var b1 : CVAR[BIT].
Var b2 : CVAR[BIT]. *)


(* Check false -> 0O[BIT]_(q,q) | 0O[BIT]_(q,q).
Check true -> (|false> @ <false|)_(q,q) | 0O[BIT]_(q,q).
Check ~(b1 == b2) -> 0O[BIT]_(q,q) | 0O[BIT]_(q,q). *)

Prove test' : 
    forall (P : Type), forall (Q : Type), P /\ Q.
    
    sorry.
    (* intro P.
    intro Q.
    split.
    sorry.
    sorry. *)
QED.

(* Pause. *)

Prove Pf2 :
    forall (b1 : CVAR[BIT]), 
    forall (b2 : CVAR[BIT]), 
    forall (q : QREG[BIT]),
    {false -> 0O[BIT]_(q,q) | 0O[BIT]_(q,q)} 
        b1 <-$ BIT;
        (* b2 <-$ BIT; *)
            ~ 
        init q; 
        unitary H q; 
        b2 := meas (P0, P1) q; 
    {~(b1 == b2) -> 0O[BIT]_(q,q) | 0O[BIT]_(q,q)}.

    intro b1.
    intro b2.
    intro q.

    r_seq -2 
        true -> (|false> @ <false|)_(q,q) | 0O[BIT]_(q,q).

    r_initq.

    cq_entail.


    intro H.
    Pause.
    split.
    intro H2.

    by_lean.

    intro H2.
    by_lean.

    Check P <= Q.
    
Pause.








Check Type.
Check forall (x : Type), x.
Check fun (x : Type) => x.
Check (fun (x : Type) => x) @ Type.

(* Check APPLY[forall (x : Type), x, Type]. *)

Check QVLIST.



Check CVAR[T].

Check CTERM[T].

Check PROG.

Var x : CVAR[T].
Var e : CTERM[T].
Check x := e.

Pause.

Prove xpf : Type = Type.
    (* Pause. *)
    sorry.
QED.

Check skip.

Pause.

Check unitary x y; skip; if x then s1 else s2 end; init qs;.