
(* Example 1 - without While *)

Var H : OType[bit, bit].
Var vplus : KType[bit].

Var P0 : OType[bit, bit].
Var P1 : OType[bit, bit].

(* The uniform distribution on bit. *)
Var mu : PDist[bit].

Prove Pf1 :
    forall (b1 : CVar[bit]), 
    forall (b2 : CVar[bit]), 
    forall (q : QReg[bit]),
    {false -> 0O[bit]_(q,q) | 0O[bit]_(q,q)} 
        b1 <-$ mu;
            ~ 
        init q; 
        unitary H q; 
        b2 := meas (P0, P1) q; 
    {~(b1 == b2) -> 0O[bit]_(q,q) | 0O[bit]_(q,q)}.
    
    intro b1. intro b2. intro q.

    r_seq -2 -2 true -> (|false> @ <false|)_(q,q) | 0O[bit]_(q,q).

    r_initq.

        simpl_entail. split.

        cq_entail. intro H. simpl. dirac. simpl_entail. refl.
        dirac. simpl_entail. refl.

    r_seq -1 1 true -> (vplus @ vplus^D)_(q,q) | 0O[bit]_(q,q).

    r_unitary. dirac. simpl_entail. split.

        cq_entail. intro H. rewrite H0. simpl. simpl_entail.
        
        by_lean.

        refl.

    judge_swap.
    r_meas_sample id.

        refl.
    
        split.
            intro H.
            (* A problem here. We don't have types for density operators yet. *)
            dirac. 
            by_lean.
            (* Pause. *)
            
            intro H.
            (* Pause. *)
            dirac. 
            
            by_lean.
            (* Pause. *)
            cq_entail. split.
                simpl. intro H. destruct H0.
                simpl. intro H. destruct H0.
    Pause.
QED.