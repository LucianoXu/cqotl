
(* Example 1 - with While *)

Var H : OTYPE[BIT, BIT].
Var vplus : KTYPE[BIT].

Def P0 : OTYPE[BIT, BIT] := |false> @ < false|.
Def P1 : OTYPE[BIT, BIT] := |true> @ <true|.

(* The uniform distribution on bit. *)
Var miu : PDIST[BIT].

Var lt : forall (i : CTERM[INT]), forall (j : CTERM[INT]), CTERM[BIT].

Var iADD : forall (i : CTERM[INT]), forall (j : CTERM[BIT]), CTERM[INT].

Prove Lemma1 : forall (x : CTERM[BIT]), ~ ~ x = x.
    intro x. simpl. refl.
QED.

Prove Lemma2 : forall (x : CTERM[BIT]), 
    forall (H : ~ x = true), x = false.

    intro x. intro H.
    rewrite <- Lemma1 @ x.
    rewrite H0. simpl. refl.
QED.

Prove Lemma3 : forall (a : CTERM[BIT]), forall (b: CTERM[BIT]),
    forall (q : QREG[BIT]), forall (H: (a -> b) = true),
        ~a -> 0O[BIT]_(q,q) <= ~b -> 0O[BIT]_(q,q).

    intro a. intro b. intro q. intro H.
    cq_entail. intro H. rewrite H1. simpl.
    revert H0. rewrite Lemma2 @ b @ H1. simpl.
    intro H. rewrite H0. simpl. simpl_entail. refl.

QED.

Prove Lemma4 : forall (a : CTERM[BIT]), forall (q: QREG[BIT]), forall (H: a = true),
    a |-> 0O[BIT, BIT]_(q, q) <= 0O[BIT, BIT]_(q, q).

    intro a. intro q. intro H.
    rewrite H0. simpl. simpl_entail. refl.
QED.

Prove WrappedPf1 : 
    
    forall (n : CTERM[INT]), forall (m : CTERM[INT]),
    forall (i : CVAR[INT]), forall (i' : CVAR[INT]),
    forall (x : CVAR[INT]), forall (x' : CVAR[INT]),
    forall (b : CVAR[BIT]), forall (b' : CVAR[BIT]), 
    forall (q : QREG[BIT]),
    {~(x == x') -> 0O[BIT]_(q,q) | 0O[BIT]_(q,q)} 
        i := n;
        while lt @ i @ m do
            b <-$ miu;
            x := iADD @ x @ b;
        end;
            ~ 
        i' := n;
        while lt @ i' @ m do
            init q; 
            unitary H q; 
            b' := meas (P0, P1) q; 
            x' := iADD @ x' @ b';
        end;
    {~(x == x') -> 0O[BIT]_(q,q) | 0O[BIT]_(q,q)}.

    intro n. intro m. intro i. intro i'. intro x. intro x'.
    intro b. intro b'. intro q.

    r_seq 1 0 ~(x == x' /\ i == n) -> 0O[BIT]_(q,q) | 0O[BIT]_(q,q).

        r_assign. simpl. simpl_entail. refl.

    r_seq 0 1 ~(x == x' /\ i == i') -> 0O[BIT]_(q,q) | 0O[BIT]_(q,q).

        r_assign. simpl_entail. refl.

    (** while-while rule *)
    r_while_while q (((~ (x == x' /\ i == i')) -> 0O[BIT, BIT]_(q, q)) | 0O[BIT, BIT]_(q, q)).
    simpl.

    (* pre order *)
    simpl_entail. simpl. apply Lemma3. simpl.
    
    (* Pause. *)
    by_lean.
    (* Pause. *)
    
    (* post order *)
    simpl_entail. simpl. apply Lemma3. simpl. 
    
    (* Pause. *)
    by_lean.
    (* Pause. *)

    r_seq 0 1 ~ ((((lt @ i) @ m) /\ ((lt @ i') @ m)) /\ ((x == x') /\ (i == i'))) -> 0O[BIT, BIT]_(q, q) /\ (true -> (|false> @ <false|)_(q,q)) | 0O[BIT]_(q,q).

    r_initq.
        simpl. simpl_entail. simpl. dirac. simpl_entail. refl.
        

    r_seq 0 1 ~ ((((lt @ i) @ m) /\ ((lt @ i') @ m)) /\ ((x == x') /\ (i == i'))) -> 0O[BIT, BIT]_(q, q) /\ (true -> (vplus @ vplus^D)_(q,q)) | 0O[BIT]_(q,q).

        r_unitary. dirac. simpl_entail. simpl. cq_entail. simpl. split.
            intro H. rewrite H0. simpl. dirac. simpl_entail. refl.
            intro H. 
            entail_trans (|false> @ <false|)_(q, q).
            simpl_entail. refl.

            simpl_entail. 
            
            (* Pause. *)
            by_lean.
            (* Pause. *)

    r_seq 1 1 ~ ((((lt @ i) @ m) /\ ((lt @ i') @ m)) /\ ((x == x') /\ (i == i') /\ (b == b'))) -> 0O[BIT, BIT]_(q, q) | 0O[BIT, BIT]_(q, q).

    judge_swap.
    r_meas_sample id.
        simpl. refl.
        split. split.
            intro H. dirac. 
            
            (* Pause. *)
            by_lean.
            (* Pause. *)
            intro H. dirac.

            (* Pause. *)
            by_lean.
            (* Pause. *)
            
            split.
            intro H. dirac.

            (* Pause. *)
            by_lean.
            (* Pause. *)
            
            intro H. dirac.

            (* Pause. *)
            by_lean.
            (* Pause. *)
            
            cq_entail. split.
                simpl. intro H. rewrite H0. simpl. dirac. simpl_entail. refl.
                simpl. intro H. rewrite H0. simpl. dirac. simpl_entail. refl.


    r_pre (((~ ((((lt @ i) @ m) /\ ((lt @ i') @ m)) /\ (((x == x') /\ (i == i')) /\ (b == b') /\ (iADD @ x @ b == iADD @ x' @ b')))) -> 0O[BIT, BIT]_(q, q)) | 0O[BIT, BIT]_(q, q)).

        simpl_entail. simpl. cq_entail. intro H. rewrite H0. simpl. 
        
        apply Lemma4. simpl. 
        
        (* Pause. *)
        by_lean.
        (* Pause. *)
    
    r_seq 1 0 (((~ ((((lt @ i) @ m) == ((lt @ i') @ m)) /\ ((x == iADD @ x' @ b') /\ (i == i')))) -> 0O[BIT, BIT]_(q, q)) | 0O[BIT, BIT]_(q, q)).

    r_assign.

        simpl_entail. simpl.
        apply Lemma3. simpl. 
        (* Pause. *)
        by_lean.
        Pause.
            
    
    r_assign.

        simpl_entail. split. simpl. simpl_entail. refl.

        refl.
    Pause.
QED.