import LeanVeri.Commons
import LeanVeri.LinearMapPropositions

variable {ùïú : Type*} [_inst : (RCLike ùïú)]

local notation "ùïú¬≤" => ((EuclideanSpace ùïú) (Fin 2))

def lt (x y : ‚Ñ§) : Bool := x < y

def iAdd : ‚Ñ§ ‚Üí Bool ‚Üí ‚Ñ§
  | x, true => x + 1
  | x, false => x

lemma obligation (b b' : Bool) (x x' i i' m : ‚Ñ§) :
    ((lt i m = true) ‚àß (lt i' m = true)) ‚àß (((x = x' ‚àß i = i') ‚àß (b = b')) ‚àß (iAdd x b = iAdd x' b')) ‚Üí ((lt i m = lt i' m) ‚àß ((iAdd x b = iAdd x' b') ‚àß (i = i'))) := by
  simp [lt]
  intro _ _ hx hi hb hadd
  rw [hx, hi, hb]
  simp
