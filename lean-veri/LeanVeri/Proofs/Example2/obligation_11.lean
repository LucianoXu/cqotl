/- LEAN4 FILE AUTO GENERATED BY CQOTL PROVER FOR OBLIGATION: obligation_11 -/
/- Proof by Iván Renison -/

import LeanVeri.Commons
import LeanVeri.LinearMapPropositions
import LeanVeri.ProjectionSubmodule

variable {𝕜 : Type*} [_inst : (RCLike 𝕜)]

local notation "𝕜²" => ((EuclideanSpace 𝕜) (Fin 2))

def iadd : ℤ → Bool → ℤ
  | x, true => x + 1
  | x, false => x

def lt : (ℤ → (ℤ → Bool)) := fun x y ↦ x < y

lemma obligation_11 (x' : ℤ) (x : ℤ) (i' : ℤ) (i : ℤ) (m : ℤ) :
    ∀ (H0 : ((¬ ((((lt ((iadd i) true)) m) = ((lt ((iadd i') true)) m)) ∧ ((x = x') ∧ (((iadd i) true) = ((iadd i') true))))) = true)), ((¬ ((((lt i) m) = ((lt i') m)) ∧ ((x = x') ∧ (i = i')))) = true) := by
  simp only [lt, decide_eq_decide, not_and, eq_iff_iff, iff_true]
  intro H0 hm hx hi
  simp [hx, hi] at H0
