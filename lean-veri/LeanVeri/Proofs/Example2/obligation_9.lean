/- LEAN4 FILE AUTO GENERATED BY CQOTL PROVER FOR OBLIGATION: obligation_9 -/
/- Proof by Iván Renison -/

import LeanVeri.Commons
import LeanVeri.LinearMapPropositions
import LeanVeri.ProjectionSubmodule

variable {𝕜 : Type*} [_inst : (RCLike 𝕜)]

local notation "𝕜²" => ((EuclideanSpace 𝕜) (Fin 2))

def iadd : ℤ → Bool → ℤ
  | x, true => x + 1
  | x, false => x

def lt : (ℤ → (ℤ → Bool)) := fun x y ↦ x < y

lemma obligation_9 (b' : Bool) (b : Bool) (x' : ℤ) (x : ℤ) (i' : ℤ) (i : ℤ) (m : ℤ) :
    ∀ (H0 : ((¬ (((lt i) m) ∧ ((((x = x') ∧ (i = i')) ∧ (b = b')) ∧ (((iadd x) b) = ((iadd x') b'))))) = true)),
      ((¬ (((lt i) m) ∧ (((x = x') ∧ (i = i')) ∧ (b = b')))) = true) := by
  simp only [lt, decide_eq_true_eq, not_and, and_imp, eq_iff_iff, iff_true]
  intro H0 hm hx hi hb
  have H := H0 hm hx hi hb
  rw [hx, hb] at H
  simp_all
