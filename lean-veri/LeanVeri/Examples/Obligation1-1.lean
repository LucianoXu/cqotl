/- LEAN4 FILE AUTO GENERATED BY CQOTL PROVER FOR PROOF OBLIGATIONS -/

import LeanVeri.Commons
import LeanVeri.LinearMapPropositions


variable {𝕜 E F : Type*} [RCLike 𝕜]

variable? [HilbertSpace 𝕜 E] => [NormedAddCommGroup E] [InnerProductSpace 𝕜 E] [CompleteSpace E]
variable [FiniteDimensional 𝕜 E]

variable? [HilbertSpace 𝕜 F] => [NormedAddCommGroup F] [InnerProductSpace 𝕜 F] [CompleteSpace F]
variable [FiniteDimensional 𝕜 F]


local notation "𝕜²" => ((EuclideanSpace 𝕜) (Fin 2))

noncomputable def H  : 𝕜² →ₗ[𝕜] 𝕜² := sorry

noncomputable def ketPlus  : 𝕜² := sorry

def ket0bra0  : 𝕜² →ₗ[𝕜] 𝕜² := sorry

def ket1bra1  : 𝕜² →ₗ[𝕜] 𝕜² := sorry

noncomputable def temp : 𝕜² := ((Hadamard.adjoint : 𝕜² →ₗ[𝕜] 𝕜²) • ketP)

lemma obligation1  :
 ((LinearMap.LoewnerOrder ket0bra0) ((Hadamard.adjoint * (ketbraP : 𝕜² →ₗ[𝕜] 𝕜²)) * Hadamard)) := by
 sorry
